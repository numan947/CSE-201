type_specifier : INT
declaration_list : ID LTHIRD CONST_INT RTHIRD
a
a dw ? ,? ,?
declaration_list : declaration_list COMMA ID
i
a dw ? ,? ,?
i dw ?
var_declaration : type_specifier declaration_list SEMICOLON
a dw ? ,? ,?
i dw ?
variable : ID 
factor : CONST_INT 
5
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 5
mov i, ax
expression_statement : expression SEMICOLON
mov ax, 5
mov i, ax
statement  : expression_statement
mov ax, 5
mov i, ax
statements : statement
mov ax, 5
mov i, ax
statement  : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement
SPC11: 
mov ax, 5
mov i, ax
mov ax, i
call outdec

SPC22: 
mov ax, i
call outdec

mov ax, 5
mov i, ax
mov ax, i
call outdec
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement  : RETURN expression SEMICOLON
mov ah, 4ch
int 21h
statements : statements statement
SPC11: 
mov ax, 5
mov i, ax
mov ax, i
call outdec
mov ah, 4ch
int 21h

SPC22: 
mov ah, 4ch
int 21h

mov ax, 5
mov i, ax
mov ax, i
call outdec
mov ah, 4ch
int 21h
compound_statement : LCURL var_declaration statements RCURL

.data

a dw ? ,? ,?
i dw ?

.code

OUTDEC PROC
;INPUT AX
PUSH AX
PUSH BX
PUSH CX
PUSH DX
OR AX,AX
JGE @END_IF1
PUSH AX
MOV DL,'-'
MOV AH,2
INT 21H
POP AX
NEG AX

@END_IF1:
XOR CX,CX
MOV BX,10D

@REPEAT1:
XOR DX,DX
DIV BX
PUSH DX
INC CX
OR AX,AX
JNE @REPEAT1

MOV AH,2

@PRINT_LOOP:

POP DX
OR DL,30H
INT 21H
LOOP @PRINT_LOOP

POP DX
POP CX
POP BX
POP AX
RET
OUTDEC ENDP

main proc

mov ax ,@data
mov ds ,ax
mov ax, 5
mov i, ax
mov ax, i
call outdec
mov ah, 4ch
int 21h
Program : INT MAIN LPAREN RPAREN compound_statement

.data

a dw ? ,? ,?
i dw ?

.code

OUTDEC PROC
;INPUT AX
PUSH AX
PUSH BX
PUSH CX
PUSH DX
OR AX,AX
JGE @END_IF1
PUSH AX
MOV DL,'-'
MOV AH,2
INT 21H
POP AX
NEG AX

@END_IF1:
XOR CX,CX
MOV BX,10D

@REPEAT1:
XOR DX,DX
DIV BX
PUSH DX
INC CX
OR AX,AX
JNE @REPEAT1

MOV AH,2

@PRINT_LOOP:

POP DX
OR DL,30H
INT 21H
LOOP @PRINT_LOOP

POP DX
POP CX
POP BX
POP AX
RET
OUTDEC ENDP

main proc

mov ax ,@data
mov ds ,ax
mov ax, 5
mov i, ax
mov ax, i
call outdec
mov ah, 4ch
int 21h
a

i

