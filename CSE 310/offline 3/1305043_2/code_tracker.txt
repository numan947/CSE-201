type_specifier : INT
declaration_list : ID LTHIRD CONST_INT RTHIRD
a
a dw ? ,? ,?
declaration_list : declaration_list COMMA ID
i
a dw ? ,? ,?
i dw ?
var_declaration : type_specifier declaration_list SEMICOLON
a dw ? ,? ,?
i dw ?
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
variable : ID 
factor : variable 
unary_expression : factor
term :unary_expression
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
factor : CONST_INT 
2
unary_expression : factor
term : term MULOP unary_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
simple_expression : term 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
rel_expression : simple_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
logic_expression : rel_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
expression : logic_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
variable : ID LTHIRD expression RTHIRD 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
factor : variable 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
unary_expression : factor
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
term : term MULOP unary_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
simple_expression : term 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
rel_expression : simple_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
logic_expression : rel_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
expression : variable ASSIGNOP logic_expression
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
statement  : expression_statement
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
statements : statement
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
variable : ID 
factor : variable 
unary_expression : factor
term :unary_expression
simple_expression : term 
factor : CONST_INT 
2
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
logic_expression : rel_expression
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
expression : logic_expression
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
factor : CONST_INT 
2
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
factor : CONST_INT 
5
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
statement  : expression_statement
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
statements : statement
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
compound_statement : LCURL statements RCURL
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
statement  : compound_statement
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
statement  : IF LPAREN expression RPAREN statement
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
statements : statements statement
SPC11: 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:

SPC22: 
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:

mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
variable : ID 
factor : CONST_INT 
7
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 7
mov i, ax
expression_statement : expression SEMICOLON
mov ax, 7
mov i, ax
statement  : expression_statement
mov ax, 7
mov i, ax
statements : statements statement
SPC11: 
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
mov ax, 7
mov i, ax

SPC22: 
mov ax, 7
mov i, ax

mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
mov ax, 7
mov i, ax
compound_statement : LCURL var_declaration statements RCURL

.data

a dw ? ,? ,?
i dw ?
t0 dw ?
t1 dw ?
t2 dw ?
t3 dw ?

.code

main proc

mov ax ,@data
mov ds ,ax
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
mov ax, 7
mov i, ax
Program : INT MAIN LPAREN RPAREN compound_statement

.data

a dw ? ,? ,?
i dw ?
t0 dw ?
t1 dw ?
t2 dw ?
t3 dw ?

.code

main proc

mov ax ,@data
mov ds ,ax
mov ax, 1
mov bx, 2
mul bx
mov t0, ax
lea di, a
add di, t0
add di, t0
mov t1, [di]
mov ax, i
mov bx, t1
mul bx
mov t2, ax
mov ax, t2
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, i
cmp ax, 2
jl L0
mov t3, 0
jmp L1
L0:
mov t3, 1
L1:
mov ax, t3
cmp ax, 1
jne L2
mov ax, 5
lea di, a
add di, 2
add di, 2
mov [di], ax
L2:
mov ax, 7
mov i, ax
a

i

