LEXER RESPONSE: Line no 000: TOKEN <INT> Lexeme <int> found


LEXER RESPONSE: Line no 000: TOKEN <MAIN> Lexeme <main> found


LEXER RESPONSE: Line no 000: TOKEN <LPAREN> Lexeme <(> found


LEXER RESPONSE: Line no 000: TOKEN <RPAREN> Lexeme <)> found


LEXER RESPONSE: Line no 000: TOKEN <LCURL> Lexeme <{> found


LEXER RESPONSE: Line no 001: TOKEN <INT> Lexeme <int> found


Matched Rule>>>type_specifier : INT



LEXER RESPONSE: Line no 001: TOKEN <LTHIRD> Lexeme <[> found


LEXER RESPONSE: Line no 001: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>declaration_list : ID LTHIRD CONST_INT RTHIRD



LEXER RESPONSE: Line no 001: TOKEN <COMMA> Lexeme <,> found


LEXER RESPONSE: Line no 001: TOKEN <COMMA> Lexeme <,> found


Matched Rule>>>declaration_list : declaration_list COMMA ID



LEXER RESPONSE: Line no 001: TOKEN <COMMA> Lexeme <,> found


Matched Rule>>>declaration_list : declaration_list COMMA ID



LEXER RESPONSE: Line no 001: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>declaration_list : declaration_list COMMA ID



Matched Rule>>>var_declaration : type_specifier declaration_list SEMICOLON



LEXER RESPONSE: Line no 001: TOKEN <FLOAT> Lexeme <float> found


Matched Rule>>>type_specifier : FLOAT



LEXER RESPONSE: Line no 001: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>declaration_list : ID



Matched Rule>>>var_declaration : var_declaration type_specifier declaration_list SEMICOLON



LEXER RESPONSE: Line no 002: TOKEN <CHAR> Lexeme <char> found


Matched Rule>>>type_specifier : CHAR



LEXER RESPONSE: Line no 002: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>declaration_list : ID



Matched Rule>>>var_declaration : var_declaration type_specifier declaration_list SEMICOLON



LEXER RESPONSE: Line no 003: TOKEN <CHAR> Lexeme <char> found


Matched Rule>>>type_specifier : CHAR



LEXER RESPONSE: Line no 003: TOKEN <LTHIRD> Lexeme <[> found


LEXER RESPONSE: Line no 003: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>declaration_list : ID LTHIRD CONST_INT RTHIRD



LEXER RESPONSE: Line no 003: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>var_declaration : var_declaration type_specifier declaration_list SEMICOLON



LEXER RESPONSE: Line no 004: TOKEN <ASSIGNOP> Lexeme <=> found


Matched Rule>>>variable : ID 



ERROR!! Undeclared variable: fuck



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 004: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



50



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : variable ASSIGNOP logic_expression



Matched Rule>>>expression_statement : expression SEMICOLON



Matched Rule>>>statement  : expression_statement



Matched Rule>>>statements : statement



LEXER RESPONSE: Line no 005: TOKEN <LTHIRD> Lexeme <[> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 005: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>unary_expression : factor



0



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>variable : ID LTHIRD expression RTHIRD 



LEXER RESPONSE: Line no 005: TOKEN <ASSIGNOP> Lexeme <=> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 005: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



1



Matched Rule>>>unary_expression : ADDOP unary_expression



-



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : variable ASSIGNOP logic_expression



Matched Rule>>>expression_statement : expression SEMICOLON



Matched Rule>>>statement  : expression_statement



Matched Rule>>>statements : statements statement



LEXER RESPONSE: Line no 006: TOKEN <LTHIRD> Lexeme <[> found


Matched Rule>>>factor : CONST_FLOAT 



LEXER RESPONSE: Line no 006: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>unary_expression : factor



10.5



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>variable : ID LTHIRD expression RTHIRD 



ERROR!! array index must be an INT for array: a



LEXER RESPONSE: Line no 006: TOKEN <ASSIGNOP> Lexeme <=> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 006: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



5



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : variable ASSIGNOP logic_expression



Matched Rule>>>expression_statement : expression SEMICOLON



Matched Rule>>>statement  : expression_statement



Matched Rule>>>statements : statements statement



LEXER RESPONSE: Line no 007: TOKEN <ASSIGNOP> Lexeme <=> found


Matched Rule>>>variable : ID 



LEXER RESPONSE: Line no 007: TOKEN <LTHIRD> Lexeme <[> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 007: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>unary_expression : factor



0



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>variable : ID LTHIRD expression RTHIRD 



Matched Rule>>>factor : variable 



Matched Rule>>>unary_expression : factor



a



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



LEXER RESPONSE: Line no 007: TOKEN <LTHIRD> Lexeme <[> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 007: TOKEN <RTHIRD> Lexeme <]> found


Matched Rule>>>unary_expression : factor



1



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>variable : ID LTHIRD expression RTHIRD 



Matched Rule>>>factor : variable 



LEXER RESPONSE: Line no 007: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



a



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : simple_expression ADDOP term



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : variable ASSIGNOP logic_expression



Matched Rule>>>expression_statement : expression SEMICOLON



Matched Rule>>>statement  : expression_statement



Matched Rule>>>statements : statements statement



LEXER RESPONSE: Line no 008: TOKEN <ASSIGNOP> Lexeme <=> found


Matched Rule>>>variable : ID 



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <MULOP> Lexeme <*> found


Matched Rule>>>unary_expression : factor



2



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>factor : CONST_INT 



Matched Rule>>>unary_expression : factor



3



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : simple_expression ADDOP term



LEXER RESPONSE: Line no 008: TOKEN <LPAREN> Lexeme <(> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <MULOP> Lexeme <%> found


Matched Rule>>>unary_expression : factor



5



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <RELOP> Lexeme <<> found


Matched Rule>>>unary_expression : factor



3



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : simple_expression ADDOP term



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <LOGICOP> Lexeme <&&> found


Matched Rule>>>unary_expression : factor



4



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression RELOP simple_expression



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <RPAREN> Lexeme <)> found


Matched Rule>>>unary_expression : factor



8



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression LOGICOP rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>factor : LPAREN expression RPAREN



LEXER RESPONSE: Line no 008: TOKEN <LOGICOP> Lexeme <||> found


Matched Rule>>>unary_expression : factor



5



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : simple_expression ADDOP term



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 008: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



2



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression LOGICOP rel_expression



Matched Rule>>>expression : variable ASSIGNOP logic_expression



Matched Rule>>>expression_statement : expression SEMICOLON



Matched Rule>>>statement  : expression_statement



Matched Rule>>>statements : statements statement



LEXER RESPONSE: Line no 009: TOKEN <RETURN> Lexeme <return> found


Matched Rule>>>factor : CONST_INT 



LEXER RESPONSE: Line no 009: TOKEN <SEMICOLON> Lexeme <;> found


Matched Rule>>>unary_expression : factor



0



Matched Rule>>>term :unary_expression



Matched Rule>>>simple_expression : term 



Matched Rule>>>rel_expression : simple_expression



Matched Rule>>>logic_expression : rel_expression



Matched Rule>>>expression : logic_expression



Matched Rule>>>statement  : RETURN expression SEMICOLON



Matched Rule>>>statements : statements statement



LEXER RESPONSE: Line no 010: TOKEN <RCURL> Lexeme <}> found


Matched Rule>>>compound_statement : LCURL var_declaration statements RCURL



Matched Rule>>>Program : INT MAIN LPAREN RPAREN compound_statement



PRINTING SYMBOL TABLE
0 --> <c , ID, -99999>
1 --> <d , ID, -99999.000000>
6 --> <i , ID, -99999>
7 --> <j , ID, -99999>
9 --> <asdf , ID, {, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL}>
13 --> <a , ID, { 0, 0,}>
14 --> <ch , ID, NULL>


PRINTING VARIABLE LIST
a ID INT
c ID INT
i ID INT
j ID INT
d ID FLOAT
ch ID CHAR
asdf ID CHAR


TOTAL LINES: 011
