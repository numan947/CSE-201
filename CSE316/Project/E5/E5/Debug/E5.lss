
E5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000843  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037f  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ROL>:
	}
}
unsigned char ROL(unsigned char number, int shiftAmount)
{
	int i;
	for (i=0; i<shiftAmount; i++)
  82:	16 16       	cp	r1, r22
  84:	17 06       	cpc	r1, r23
  86:	4c f4       	brge	.+18     	; 0x9a <ROL+0x18>
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	{
		unsigned char MSB = number & 0b10000000;
		MSB = MSB >> 7;
		number = number << 1;
		number = number | MSB;
  8c:	88 0f       	add	r24, r24
  8e:	81 1d       	adc	r24, r1
	}
}
unsigned char ROL(unsigned char number, int shiftAmount)
{
	int i;
	for (i=0; i<shiftAmount; i++)
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
  94:	62 17       	cp	r22, r18
  96:	73 07       	cpc	r23, r19
  98:	c9 f7       	brne	.-14     	; 0x8c <ROL+0xa>
		MSB = MSB >> 7;
		number = number << 1;
		number = number | MSB;
	}
	return number;
}
  9a:	08 95       	ret

0000009c <drawCharRedRotate>:
		//_delay_ms(200);
    }
}

void drawCharRedRotate(unsigned char* character, int shift)
{
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	8c 01       	movw	r16, r24
  ae:	6b 01       	movw	r12, r22
  b0:	e1 2c       	mov	r14, r1
  b2:	f1 2c       	mov	r15, r1
  b4:	26 c0       	rjmp	.+76     	; 0x102 <drawCharRedRotate+0x66>
	{
		int j;
		unsigned char row = 0b00000001;
		for (j=0; j<8; j++)
		{
			PORTD = ROL(row, j);
  b6:	be 01       	movw	r22, r28
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 41 00 	call	0x82	; 0x82 <ROL>
  be:	82 bb       	out	0x12, r24	; 18
			PORTA = character[(j + shift)%8];
  c0:	c6 01       	movw	r24, r12
  c2:	8c 0f       	add	r24, r28
  c4:	9d 1f       	adc	r25, r29
  c6:	87 70       	andi	r24, 0x07	; 7
  c8:	90 78       	andi	r25, 0x80	; 128
  ca:	99 23       	and	r25, r25
  cc:	24 f4       	brge	.+8      	; 0xd6 <drawCharRedRotate+0x3a>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	88 6f       	ori	r24, 0xF8	; 248
  d2:	9f 6f       	ori	r25, 0xFF	; 255
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	f8 01       	movw	r30, r16
  d8:	e8 0f       	add	r30, r24
  da:	f9 1f       	adc	r31, r25
  dc:	80 81       	ld	r24, Z
  de:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <drawCharRedRotate+0x48>
  e8:	00 c0       	rjmp	.+0      	; 0xea <drawCharRedRotate+0x4e>
  ea:	00 00       	nop
	long i;
	for (i=0; i<10; i++)
	{
		int j;
		unsigned char row = 0b00000001;
		for (j=0; j<8; j++)
  ec:	21 96       	adiw	r28, 0x01	; 1
  ee:	c8 30       	cpi	r28, 0x08	; 8
  f0:	d1 05       	cpc	r29, r1
  f2:	09 f7       	brne	.-62     	; 0xb6 <drawCharRedRotate+0x1a>
  f4:	9f ef       	ldi	r25, 0xFF	; 255
  f6:	e9 1a       	sub	r14, r25
  f8:	f9 0a       	sbc	r15, r25
}

void drawCharRedRotate(unsigned char* character, int shift)
{
	long i;
	for (i=0; i<10; i++)
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	e8 16       	cp	r14, r24
  fe:	f1 04       	cpc	r15, r1
 100:	19 f0       	breq	.+6      	; 0x108 <drawCharRedRotate+0x6c>
		//_delay_ms(200);
    }
}

void drawCharRedRotate(unsigned char* character, int shift)
{
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	d7 cf       	rjmp	.-82     	; 0xb6 <drawCharRedRotate+0x1a>
			PORTA = character[(j + shift)%8];
			_delay_ms(1);
		}
		
	}	
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	df 90       	pop	r13
 116:	cf 90       	pop	r12
 118:	08 95       	ret

0000011a <main>:
};

int main(void)
{
    /* Replace with your application code */
	DDRA=0xff;//positive row
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xff;//negative column red
 11e:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		for (int i = 0; i < 8;i++)
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
		{
			drawCharRedRotate(zed, i);	
 124:	be 01       	movw	r22, r28
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4e 00 	call	0x9c	; 0x9c <drawCharRedRotate>
    /* Replace with your application code */
	DDRA=0xff;//positive row
	DDRD=0xff;//negative column red
    while (1) 
    {
		for (int i = 0; i < 8;i++)
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	c8 30       	cpi	r28, 0x08	; 8
 132:	d1 05       	cpc	r29, r1
 134:	b9 f7       	brne	.-18     	; 0x124 <main+0xa>
 136:	f4 cf       	rjmp	.-24     	; 0x120 <main+0x6>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
