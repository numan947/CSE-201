
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001122  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000366  00800060  00001122  000011b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fc  008003c6  008003c6  0000151c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3f  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000397  00000000  00000000  00002373  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000537  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010c3  00000000  00000000  000032eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  000043ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 05 	call	0xb26	; 0xb26 <main>
      8a:	0c 94 8f 08 	jmp	0x111e	; 0x111e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initializeObjects>:
		r=Objects[i].x ;
		c=Objects[i].y ;
		
		switch(Objects[i].type){
			case 'P':
			mat[r][c+1]= mat[r+1][c]=mat[r+1][c+1]=mat[r+1][c+2]=1;
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	1f 93       	push	r17
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	80 e5       	ldi	r24, 0x50	; 80
      a8:	80 93 d8 05 	sts	0x05D8, r24
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	90 93 d7 05 	sts	0x05D7, r25
      b4:	80 93 d6 05 	sts	0x05D6, r24
      b8:	2e e0       	ldi	r18, 0x0E	; 14
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	30 93 d3 05 	sts	0x05D3, r19
      c0:	20 93 d2 05 	sts	0x05D2, r18
      c4:	27 e0       	ldi	r18, 0x07	; 7
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	30 93 d5 05 	sts	0x05D5, r19
      cc:	20 93 d4 05 	sts	0x05D4, r18
      d0:	26 e4       	ldi	r18, 0x46	; 70
      d2:	20 93 e3 05 	sts	0x05E3, r18
      d6:	10 92 e2 05 	sts	0x05E2, r1
      da:	10 92 e1 05 	sts	0x05E1, r1
      de:	2d e0       	ldi	r18, 0x0D	; 13
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	30 93 de 05 	sts	0x05DE, r19
      e6:	20 93 dd 05 	sts	0x05DD, r18
      ea:	28 e0       	ldi	r18, 0x08	; 8
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	30 93 e0 05 	sts	0x05E0, r19
      f2:	20 93 df 05 	sts	0x05DF, r18
      f6:	4d e4       	ldi	r20, 0x4D	; 77
      f8:	40 93 ee 05 	sts	0x05EE, r20
			break;
			case 'F':
			mat[r][c]=1;
      fc:	90 93 ed 05 	sts	0x05ED, r25
     100:	80 93 ec 05 	sts	0x05EC, r24
     104:	10 92 e9 05 	sts	0x05E9, r1
     108:	10 92 e8 05 	sts	0x05E8, r1
     10c:	10 92 eb 05 	sts	0x05EB, r1
     110:	10 92 ea 05 	sts	0x05EA, r1
     114:	10 92 e7 05 	sts	0x05E7, r1
     118:	10 92 e6 05 	sts	0x05E6, r1
			break;
     11c:	40 93 f9 05 	sts	0x05F9, r20
			case 'M':
			mat[r][c]=mat[r][c+1]=mat[r][c+2]=mat[r+1][c+1]=1;
     120:	90 93 f8 05 	sts	0x05F8, r25
     124:	80 93 f7 05 	sts	0x05F7, r24
     128:	10 92 f4 05 	sts	0x05F4, r1
     12c:	10 92 f3 05 	sts	0x05F3, r1
     130:	30 93 f6 05 	sts	0x05F6, r19
     134:	20 93 f5 05 	sts	0x05F5, r18
     138:	10 92 f2 05 	sts	0x05F2, r1
     13c:	10 92 f1 05 	sts	0x05F1, r1
     140:	64 e0       	ldi	r22, 0x04	; 4
     142:	76 e0       	ldi	r23, 0x06	; 6
     144:	02 e0       	ldi	r16, 0x02	; 2
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	68 94       	set
     14e:	aa 24       	eor	r10, r10
     150:	a1 f8       	bld	r10, 1
     152:	b1 2c       	mov	r11, r1
     154:	0f 2e       	mov	r0, r31
     156:	f2 e4       	ldi	r31, 0x42	; 66
     158:	df 2e       	mov	r13, r31
     15a:	f0 2d       	mov	r31, r0
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	0f 2e       	mov	r0, r31
     162:	f1 e4       	ldi	r31, 0x41	; 65
     164:	cf 2e       	mov	r12, r31
     166:	f0 2d       	mov	r31, r0
     168:	21 c0       	rjmp	.+66     	; 0x1ac <initializeObjects+0x11a>
     16a:	22 30       	cpi	r18, 0x02	; 2
     16c:	31 05       	cpc	r19, r1
     16e:	44 f4       	brge	.+16     	; 0x180 <initializeObjects+0xee>
     170:	cc 92       	st	X, r12
     172:	55 83       	std	Z+5, r21	; 0x05
     174:	44 83       	std	Z+4, r20	; 0x04
     176:	f1 82       	std	Z+1, r15	; 0x01
			break;
     178:	e0 82       	st	Z, r14
			case 'A':
			
			mat[r][c]=mat[r][c+2]=mat[r+1][c+1]=1;
     17a:	93 83       	std	Z+3, r25	; 0x03
     17c:	82 83       	std	Z+2, r24	; 0x02
     17e:	07 c0       	rjmp	.+14     	; 0x18e <initializeObjects+0xfc>
     180:	dc 92       	st	X, r13
     182:	55 83       	std	Z+5, r21	; 0x05
     184:	44 83       	std	Z+4, r20	; 0x04
     186:	93 83       	std	Z+3, r25	; 0x03
     188:	82 83       	std	Z+2, r24	; 0x02
     18a:	d1 83       	std	Z+1, r29	; 0x01
     18c:	c0 83       	st	Z, r28
     18e:	1b 96       	adiw	r26, 0x0b	; 11
     190:	3b 96       	adiw	r30, 0x0b	; 11
     192:	03 96       	adiw	r24, 0x03	; 3
     194:	8e 30       	cpi	r24, 0x0E	; 14
     196:	91 05       	cpc	r25, r1
     198:	41 f7       	brne	.-48     	; 0x16a <initializeObjects+0xd8>
     19a:	2f 5f       	subi	r18, 0xFF	; 255
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	0e 5f       	subi	r16, 0xFE	; 254
     1a0:	1f 4f       	sbci	r17, 0xFF	; 255
     1a2:	64 5d       	subi	r22, 0xD4	; 212
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	24 30       	cpi	r18, 0x04	; 4
     1a8:	31 05       	cpc	r19, r1
     1aa:	49 f0       	breq	.+18     	; 0x1be <initializeObjects+0x12c>
     1ac:	78 01       	movw	r14, r16
     1ae:	fb 01       	movw	r30, r22
     1b0:	36 97       	sbiw	r30, 0x06	; 6
     1b2:	db 01       	movw	r26, r22
     1b4:	8a 2d       	mov	r24, r10
     1b6:	9b 2d       	mov	r25, r11
     1b8:	e8 01       	movw	r28, r16
     1ba:	21 96       	adiw	r28, 0x01	; 1
     1bc:	d6 cf       	rjmp	.-84     	; 0x16a <initializeObjects+0xd8>
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
			break;
     1c6:	ff 90       	pop	r15
			case 'B':
			mat[r][c+1]=mat[r+1][c]=mat[r+1][c+2]=1;
     1c8:	ef 90       	pop	r14
     1ca:	df 90       	pop	r13
     1cc:	cf 90       	pop	r12
     1ce:	bf 90       	pop	r11
     1d0:	af 90       	pop	r10
     1d2:	08 95       	ret

000001d4 <loadObjectsColor>:
     1d4:	6f 92       	push	r6
     1d6:	7f 92       	push	r7
     1d8:	8f 92       	push	r8
     1da:	9f 92       	push	r9
     1dc:	af 92       	push	r10
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	bc 01       	movw	r22, r24
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	b0 e1       	ldi	r27, 0x10	; 16
     1f8:	a0 e0       	ldi	r26, 0x00	; 0
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <loadObjectsColor+0x44>
     1fc:	11 92       	st	Z+, r1
     1fe:	11 92       	st	Z+, r1
     200:	21 50       	subi	r18, 0x01	; 1
     202:	31 09       	sbc	r19, r1
     204:	21 15       	cp	r18, r1
     206:	31 05       	cpc	r19, r1
     208:	c9 f7       	brne	.-14     	; 0x1fc <loadObjectsColor+0x28>
     20a:	4f 5f       	subi	r20, 0xFF	; 255
     20c:	5f 4f       	sbci	r21, 0xFF	; 255
     20e:	60 5e       	subi	r22, 0xE0	; 224
     210:	7f 4f       	sbci	r23, 0xFF	; 255
     212:	40 31       	cpi	r20, 0x10	; 16
     214:	51 05       	cpc	r21, r1
     216:	21 f0       	breq	.+8      	; 0x220 <loadObjectsColor+0x4c>
     218:	fb 01       	movw	r30, r22
     21a:	2b 2f       	mov	r18, r27
     21c:	3a 2f       	mov	r19, r26
     21e:	ee cf       	rjmp	.-36     	; 0x1fc <loadObjectsColor+0x28>
     220:	e2 ed       	ldi	r30, 0xD2	; 210
     222:	f5 e0       	ldi	r31, 0x05	; 5
     224:	a8 ed       	ldi	r26, 0xD8	; 216
     226:	b5 e0       	ldi	r27, 0x05	; 5
void loadObjects(int mat [][16])
{
	int r,c ;
	for(int i=0;i<16;i++)
	for(int j=0;j<16;j++)mat[i][j]=0;
	for(int i=0;i<NumObjects ;i++)
     228:	4e ea       	ldi	r20, 0xAE	; 174
     22a:	56 e0       	ldi	r21, 0x06	; 6
     22c:	68 94       	set
     22e:	88 24       	eor	r8, r8
			mat[r][c+1]=mat[r+1][c]=mat[r+1][c+2]=1;
			break;
			
		}
	}
}
     230:	81 f8       	bld	r8, 1
     232:	91 2c       	mov	r9, r1
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	24 81       	ldd	r18, Z+4	; 0x04
     23a:	35 81       	ldd	r19, Z+5	; 0x05
     23c:	23 2b       	or	r18, r19
     23e:	09 f4       	brne	.+2      	; 0x242 <loadObjectsColor+0x6e>
     240:	e5 c0       	rjmp	.+458    	; 0x40c <loadObjectsColor+0x238>
     242:	e0 80       	ld	r14, Z
     244:	f1 80       	ldd	r15, Z+1	; 0x01
     246:	22 81       	ldd	r18, Z+2	; 0x02
     248:	33 81       	ldd	r19, Z+3	; 0x03
	for(int i=0;i<NumObjects ;i++)
	{
		if(Objects[i].valid==false)continue ;
		r=Objects[i].x ;
		c=Objects[i].y ;
		switch(Objects[i].type){
     24a:	1c 91       	ld	r17, X
     24c:	16 34       	cpi	r17, 0x46	; 70
     24e:	09 f4       	brne	.+2      	; 0x252 <loadObjectsColor+0x7e>
     250:	45 c0       	rjmp	.+138    	; 0x2dc <loadObjectsColor+0x108>
     252:	38 f4       	brcc	.+14     	; 0x262 <loadObjectsColor+0x8e>
     254:	11 34       	cpi	r17, 0x41	; 65
     256:	09 f4       	brne	.+2      	; 0x25a <loadObjectsColor+0x86>
     258:	84 c0       	rjmp	.+264    	; 0x362 <loadObjectsColor+0x18e>
     25a:	12 34       	cpi	r17, 0x42	; 66
     25c:	09 f4       	brne	.+2      	; 0x260 <loadObjectsColor+0x8c>
     25e:	a9 c0       	rjmp	.+338    	; 0x3b2 <loadObjectsColor+0x1de>
     260:	d5 c0       	rjmp	.+426    	; 0x40c <loadObjectsColor+0x238>
     262:	1d 34       	cpi	r17, 0x4D	; 77
     264:	09 f4       	brne	.+2      	; 0x268 <loadObjectsColor+0x94>
     266:	4e c0       	rjmp	.+156    	; 0x304 <loadObjectsColor+0x130>
     268:	10 35       	cpi	r17, 0x50	; 80
     26a:	09 f0       	breq	.+2      	; 0x26e <loadObjectsColor+0x9a>
     26c:	cf c0       	rjmp	.+414    	; 0x40c <loadObjectsColor+0x238>
			case 'P': 
					   mat[r][c+1]= mat[r+1][c]=mat[r+1][c+1]=mat[r+1][c+2]=2; // 2 means red ..
     26e:	ee 0c       	add	r14, r14
     270:	ff 1c       	adc	r15, r15
     272:	ee 0c       	add	r14, r14
     274:	ff 1c       	adc	r15, r15
     276:	ee 0c       	add	r14, r14
     278:	ff 1c       	adc	r15, r15
     27a:	ee 0c       	add	r14, r14
     27c:	ff 1c       	adc	r15, r15
     27e:	ee 0c       	add	r14, r14
     280:	ff 1c       	adc	r15, r15
     282:	59 01       	movw	r10, r18
     284:	1f ef       	ldi	r17, 0xFF	; 255
     286:	a1 1a       	sub	r10, r17
     288:	b1 0a       	sbc	r11, r17
     28a:	87 01       	movw	r16, r14
     28c:	00 5e       	subi	r16, 0xE0	; 224
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
     290:	38 01       	movw	r6, r16
     292:	68 0e       	add	r6, r24
     294:	79 1e       	adc	r7, r25
     296:	69 01       	movw	r12, r18
     298:	c2 e0       	ldi	r28, 0x02	; 2
     29a:	cc 0e       	add	r12, r28
     29c:	d1 1c       	adc	r13, r1
     29e:	cc 0c       	add	r12, r12
     2a0:	dd 1c       	adc	r13, r13
     2a2:	c6 0c       	add	r12, r6
     2a4:	d7 1c       	adc	r13, r7
     2a6:	e6 01       	movw	r28, r12
     2a8:	99 82       	std	Y+1, r9	; 0x01
     2aa:	88 82       	st	Y, r8
     2ac:	aa 0c       	add	r10, r10
     2ae:	bb 1c       	adc	r11, r11
     2b0:	63 01       	movw	r12, r6
     2b2:	ca 0c       	add	r12, r10
     2b4:	db 1c       	adc	r13, r11
     2b6:	e6 01       	movw	r28, r12
     2b8:	99 82       	std	Y+1, r9	; 0x01
     2ba:	88 82       	st	Y, r8
     2bc:	22 0f       	add	r18, r18
     2be:	33 1f       	adc	r19, r19
     2c0:	83 01       	movw	r16, r6
     2c2:	02 0f       	add	r16, r18
     2c4:	13 1f       	adc	r17, r19
     2c6:	e8 01       	movw	r28, r16
     2c8:	99 82       	std	Y+1, r9	; 0x01
     2ca:	88 82       	st	Y, r8
     2cc:	e8 0e       	add	r14, r24
     2ce:	f9 1e       	adc	r15, r25
     2d0:	ae 0c       	add	r10, r14
     2d2:	bf 1c       	adc	r11, r15
     2d4:	e5 01       	movw	r28, r10
     2d6:	99 82       	std	Y+1, r9	; 0x01
     2d8:	88 82       	st	Y, r8
					   break;
     2da:	98 c0       	rjmp	.+304    	; 0x40c <loadObjectsColor+0x238>
			case 'F':
					   mat[r][c]=2 ; //2 = Red
     2dc:	ee 0c       	add	r14, r14
     2de:	ff 1c       	adc	r15, r15
     2e0:	ee 0c       	add	r14, r14
     2e2:	ff 1c       	adc	r15, r15
     2e4:	ee 0c       	add	r14, r14
     2e6:	ff 1c       	adc	r15, r15
     2e8:	ee 0c       	add	r14, r14
     2ea:	ff 1c       	adc	r15, r15
     2ec:	ee 0c       	add	r14, r14
     2ee:	ff 1c       	adc	r15, r15
     2f0:	e8 0e       	add	r14, r24
     2f2:	f9 1e       	adc	r15, r25
     2f4:	22 0f       	add	r18, r18
     2f6:	33 1f       	adc	r19, r19
     2f8:	2e 0d       	add	r18, r14
     2fa:	3f 1d       	adc	r19, r15
     2fc:	e9 01       	movw	r28, r18
     2fe:	99 82       	std	Y+1, r9	; 0x01
     300:	88 82       	st	Y, r8
					   break;
     302:	84 c0       	rjmp	.+264    	; 0x40c <loadObjectsColor+0x238>
			case 'M':
			           mat[r][c]=mat[r][c+1]=mat[r][c+2]=mat[r+1][c+1]=1; // 1 means Green .. 
     304:	ee 0c       	add	r14, r14
     306:	ff 1c       	adc	r15, r15
     308:	ee 0c       	add	r14, r14
     30a:	ff 1c       	adc	r15, r15
     30c:	ee 0c       	add	r14, r14
     30e:	ff 1c       	adc	r15, r15
     310:	ee 0c       	add	r14, r14
     312:	ff 1c       	adc	r15, r15
     314:	ee 0c       	add	r14, r14
     316:	ff 1c       	adc	r15, r15
     318:	e8 0e       	add	r14, r24
     31a:	f9 1e       	adc	r15, r25
     31c:	89 01       	movw	r16, r18
     31e:	0f 5f       	subi	r16, 0xFF	; 255
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	00 0f       	add	r16, r16
     324:	11 1f       	adc	r17, r17
     326:	67 01       	movw	r12, r14
     328:	c0 0e       	add	r12, r16
     32a:	d1 1e       	adc	r13, r17
     32c:	e6 01       	movw	r28, r12
     32e:	79 a3       	std	Y+33, r23	; 0x21
     330:	68 a3       	std	Y+32, r22	; 0x20
     332:	69 01       	movw	r12, r18
     334:	d2 e0       	ldi	r29, 0x02	; 2
     336:	cd 0e       	add	r12, r29
     338:	d1 1c       	adc	r13, r1
     33a:	cc 0c       	add	r12, r12
     33c:	dd 1c       	adc	r13, r13
     33e:	ce 0c       	add	r12, r14
     340:	df 1c       	adc	r13, r15
     342:	e6 01       	movw	r28, r12
     344:	79 83       	std	Y+1, r23	; 0x01
     346:	68 83       	st	Y, r22
     348:	0e 0d       	add	r16, r14
     34a:	1f 1d       	adc	r17, r15
     34c:	e8 01       	movw	r28, r16
     34e:	79 83       	std	Y+1, r23	; 0x01
     350:	68 83       	st	Y, r22
     352:	22 0f       	add	r18, r18
     354:	33 1f       	adc	r19, r19
     356:	e2 0e       	add	r14, r18
     358:	f3 1e       	adc	r15, r19
     35a:	e7 01       	movw	r28, r14
     35c:	79 83       	std	Y+1, r23	; 0x01
     35e:	68 83       	st	Y, r22
					   break;
     360:	55 c0       	rjmp	.+170    	; 0x40c <loadObjectsColor+0x238>
			case 'A':  
			
					   mat[r][c]=mat[r][c+2]=mat[r+1][c+1]=1;
     362:	ee 0c       	add	r14, r14
     364:	ff 1c       	adc	r15, r15
     366:	ee 0c       	add	r14, r14
     368:	ff 1c       	adc	r15, r15
     36a:	ee 0c       	add	r14, r14
     36c:	ff 1c       	adc	r15, r15
     36e:	ee 0c       	add	r14, r14
     370:	ff 1c       	adc	r15, r15
     372:	ee 0c       	add	r14, r14
     374:	ff 1c       	adc	r15, r15
     376:	e8 0e       	add	r14, r24
     378:	f9 1e       	adc	r15, r25
     37a:	89 01       	movw	r16, r18
     37c:	0f 5f       	subi	r16, 0xFF	; 255
     37e:	1f 4f       	sbci	r17, 0xFF	; 255
     380:	00 0f       	add	r16, r16
     382:	11 1f       	adc	r17, r17
     384:	0e 0d       	add	r16, r14
     386:	1f 1d       	adc	r17, r15
     388:	e8 01       	movw	r28, r16
     38a:	79 a3       	std	Y+33, r23	; 0x21
     38c:	68 a3       	std	Y+32, r22	; 0x20
     38e:	89 01       	movw	r16, r18
     390:	0e 5f       	subi	r16, 0xFE	; 254
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	0e 0d       	add	r16, r14
     39a:	1f 1d       	adc	r17, r15
     39c:	e8 01       	movw	r28, r16
     39e:	79 83       	std	Y+1, r23	; 0x01
     3a0:	68 83       	st	Y, r22
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	e2 0e       	add	r14, r18
     3a8:	f3 1e       	adc	r15, r19
     3aa:	e7 01       	movw	r28, r14
     3ac:	79 83       	std	Y+1, r23	; 0x01
     3ae:	68 83       	st	Y, r22
					   break;
     3b0:	2d c0       	rjmp	.+90     	; 0x40c <loadObjectsColor+0x238>
			case 'B': 
					   mat[r][c+1]=mat[r+1][c]=mat[r+1][c+2]=1;
     3b2:	ee 0c       	add	r14, r14
     3b4:	ff 1c       	adc	r15, r15
     3b6:	ee 0c       	add	r14, r14
     3b8:	ff 1c       	adc	r15, r15
     3ba:	ee 0c       	add	r14, r14
     3bc:	ff 1c       	adc	r15, r15
     3be:	ee 0c       	add	r14, r14
     3c0:	ff 1c       	adc	r15, r15
     3c2:	ee 0c       	add	r14, r14
     3c4:	ff 1c       	adc	r15, r15
     3c6:	87 01       	movw	r16, r14
     3c8:	00 5e       	subi	r16, 0xE0	; 224
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	08 0f       	add	r16, r24
     3ce:	19 1f       	adc	r17, r25
     3d0:	69 01       	movw	r12, r18
     3d2:	d2 e0       	ldi	r29, 0x02	; 2
     3d4:	cd 0e       	add	r12, r29
     3d6:	d1 1c       	adc	r13, r1
     3d8:	cc 0c       	add	r12, r12
     3da:	dd 1c       	adc	r13, r13
     3dc:	c0 0e       	add	r12, r16
     3de:	d1 1e       	adc	r13, r17
     3e0:	e6 01       	movw	r28, r12
     3e2:	79 83       	std	Y+1, r23	; 0x01
     3e4:	68 83       	st	Y, r22
     3e6:	69 01       	movw	r12, r18
     3e8:	cc 0c       	add	r12, r12
     3ea:	dd 1c       	adc	r13, r13
     3ec:	0c 0d       	add	r16, r12
     3ee:	1d 1d       	adc	r17, r13
     3f0:	e8 01       	movw	r28, r16
     3f2:	79 83       	std	Y+1, r23	; 0x01
     3f4:	68 83       	st	Y, r22
     3f6:	e8 0e       	add	r14, r24
     3f8:	f9 1e       	adc	r15, r25
     3fa:	2f 5f       	subi	r18, 0xFF	; 255
     3fc:	3f 4f       	sbci	r19, 0xFF	; 255
     3fe:	22 0f       	add	r18, r18
     400:	33 1f       	adc	r19, r19
     402:	e2 0e       	add	r14, r18
     404:	f3 1e       	adc	r15, r19
     406:	e7 01       	movw	r28, r14
     408:	79 83       	std	Y+1, r23	; 0x01
     40a:	68 83       	st	Y, r22
     40c:	3b 96       	adiw	r30, 0x0b	; 11
     40e:	1b 96       	adiw	r26, 0x0b	; 11
void loadObjectsColor(int mat [][16])
{
	int r,c ;
	for(int i=0;i<16;i++)
		for(int j=0;j<16;j++)mat[i][j]=0;
	for(int i=0;i<NumObjects ;i++)
     410:	e4 17       	cp	r30, r20
     412:	f5 07       	cpc	r31, r21
     414:	09 f0       	breq	.+2      	; 0x418 <loadObjectsColor+0x244>
     416:	10 cf       	rjmp	.-480    	; 0x238 <loadObjectsColor+0x64>
					   mat[r][c+1]=mat[r+1][c]=mat[r+1][c+2]=1;
					   break;
					  
		}
	}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	08 95       	ret

00000436 <initializeColor>:
	

}
void initializeColor()
{
	    DDRD=0b11110000 ;
     436:	80 ef       	ldi	r24, 0xF0	; 240
     438:	81 bb       	out	0x11, r24	; 17
		DDRA=0b11001111 ;
     43a:	8f ec       	ldi	r24, 0xCF	; 207
     43c:	8a bb       	out	0x1a, r24	; 26
		DDRB=0xff ;
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	87 bb       	out	0x17, r24	; 23
		DDRC=0xff ;
     442:	84 bb       	out	0x14, r24	; 20
		MCUCSR = (1<<JTD);
     444:	80 e8       	ldi	r24, 0x80	; 128
     446:	84 bf       	out	0x34, r24	; 52
		MCUCSR = (1<<JTD);
     448:	84 bf       	out	0x34, r24	; 52
     44a:	08 95       	ret

0000044c <showPointGreen>:
		
	}
}
void showPointGreen(int i,int j)
{
	if(i<8)
     44c:	88 30       	cpi	r24, 0x08	; 8
     44e:	91 05       	cpc	r25, r1
     450:	54 f4       	brge	.+20     	; 0x466 <showPointGreen+0x1a>
	{
		PORTB=1<<i ;
     452:	21 e0       	ldi	r18, 0x01	; 1
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	a9 01       	movw	r20, r18
     458:	02 c0       	rjmp	.+4      	; 0x45e <showPointGreen+0x12>
     45a:	44 0f       	add	r20, r20
     45c:	55 1f       	adc	r21, r21
     45e:	8a 95       	dec	r24
     460:	e2 f7       	brpl	.-8      	; 0x45a <showPointGreen+0xe>
     462:	48 bb       	out	0x18, r20	; 24
     464:	11 c0       	rjmp	.+34     	; 0x488 <showPointGreen+0x3c>

	}
	else PORTC = 1<< (i%8) ;	
     466:	87 70       	andi	r24, 0x07	; 7
     468:	90 78       	andi	r25, 0x80	; 128
     46a:	99 23       	and	r25, r25
     46c:	24 f4       	brge	.+8      	; 0x476 <showPointGreen+0x2a>
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	88 6f       	ori	r24, 0xF8	; 248
     472:	9f 6f       	ori	r25, 0xFF	; 255
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	21 e0       	ldi	r18, 0x01	; 1
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	a9 01       	movw	r20, r18
     47c:	02 c0       	rjmp	.+4      	; 0x482 <showPointGreen+0x36>
     47e:	44 0f       	add	r20, r20
     480:	55 1f       	adc	r21, r21
     482:	8a 95       	dec	r24
     484:	e2 f7       	brpl	.-8      	; 0x47e <showPointGreen+0x32>
     486:	45 bb       	out	0x15, r20	; 21
	PORTA =j|0<<6 | 1<<7;
     488:	60 68       	ori	r22, 0x80	; 128
     48a:	6b bb       	out	0x1b, r22	; 27
     48c:	08 95       	ret

0000048e <showPointRed>:
		
}
void showPointRed(int i,int j)
{
		if(i<8)
     48e:	88 30       	cpi	r24, 0x08	; 8
     490:	91 05       	cpc	r25, r1
     492:	54 f4       	brge	.+20     	; 0x4a8 <showPointRed+0x1a>
		{
			PORTB=1<<i ;
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	a9 01       	movw	r20, r18
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <showPointRed+0x12>
     49c:	44 0f       	add	r20, r20
     49e:	55 1f       	adc	r21, r21
     4a0:	8a 95       	dec	r24
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <showPointRed+0xe>
     4a4:	48 bb       	out	0x18, r20	; 24
     4a6:	11 c0       	rjmp	.+34     	; 0x4ca <showPointRed+0x3c>

		}
		else PORTC = 1<< (i%8) ;
     4a8:	87 70       	andi	r24, 0x07	; 7
     4aa:	90 78       	andi	r25, 0x80	; 128
     4ac:	99 23       	and	r25, r25
     4ae:	24 f4       	brge	.+8      	; 0x4b8 <showPointRed+0x2a>
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	88 6f       	ori	r24, 0xF8	; 248
     4b4:	9f 6f       	ori	r25, 0xFF	; 255
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	a9 01       	movw	r20, r18
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <showPointRed+0x36>
     4c0:	44 0f       	add	r20, r20
     4c2:	55 1f       	adc	r21, r21
     4c4:	8a 95       	dec	r24
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <showPointRed+0x32>
     4c8:	45 bb       	out	0x15, r20	; 21
		PORTA =1<<6 | 0<<7;
     4ca:	80 e4       	ldi	r24, 0x40	; 64
     4cc:	8b bb       	out	0x1b, r24	; 27
		PORTD = j << 4 ;
     4ce:	62 95       	swap	r22
     4d0:	60 7f       	andi	r22, 0xF0	; 240
     4d2:	62 bb       	out	0x12, r22	; 18
     4d4:	08 95       	ret

000004d6 <showColor>:
void showPointNull(int i,int j)
{
		PORTB=PORTC=0;
}
void showColor(int mat[][16])
{
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	6c 01       	movw	r12, r24
	unsigned char pb=0,pc=0;
	for(int i=0;i<16;i++)
     4ec:	e1 2c       	mov	r14, r1
     4ee:	f1 2c       	mov	r15, r1
void showPointNull(int i,int j)
{
		PORTB=PORTC=0;
}
void showColor(int mat[][16])
{
     4f0:	a1 2c       	mov	r10, r1
     4f2:	b1 2c       	mov	r11, r1
     4f4:	29 c0       	rjmp	.+82     	; 0x548 <showColor+0x72>
	unsigned char pb=0,pc=0;
	for(int i=0;i<16;i++)
	{
		for(int j=0;j<16;j++)
		{
				PORTB=PORTC=0;
     4f6:	15 ba       	out	0x15, r1	; 21
     4f8:	18 ba       	out	0x18, r1	; 24
				if(mat[i][j]==2)showPointRed(i,j);
     4fa:	f8 01       	movw	r30, r16
     4fc:	21 91       	ld	r18, Z+
     4fe:	31 91       	ld	r19, Z+
     500:	8f 01       	movw	r16, r30
     502:	22 30       	cpi	r18, 0x02	; 2
     504:	31 05       	cpc	r19, r1
     506:	29 f4       	brne	.+10     	; 0x512 <showColor+0x3c>
     508:	be 01       	movw	r22, r28
     50a:	c7 01       	movw	r24, r14
     50c:	0e 94 47 02 	call	0x48e	; 0x48e <showPointRed>
     510:	0a c0       	rjmp	.+20     	; 0x526 <showColor+0x50>
				else if(mat[i][j]==1)showPointGreen(i,j);
     512:	21 30       	cpi	r18, 0x01	; 1
     514:	31 05       	cpc	r19, r1
     516:	29 f4       	brne	.+10     	; 0x522 <showColor+0x4c>
     518:	be 01       	movw	r22, r28
     51a:	c7 01       	movw	r24, r14
     51c:	0e 94 26 02 	call	0x44c	; 0x44c <showPointGreen>
     520:	02 c0       	rjmp	.+4      	; 0x526 <showColor+0x50>
		PORTA =1<<6 | 0<<7;
		PORTD = j << 4 ;
}
void showPointNull(int i,int j)
{
		PORTB=PORTC=0;
     522:	15 ba       	out	0x15, r1	; 21
     524:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     526:	f5 e0       	ldi	r31, 0x05	; 5
     528:	fa 95       	dec	r31
     52a:	f1 f7       	brne	.-4      	; 0x528 <showColor+0x52>
void showColor(int mat[][16])
{
	unsigned char pb=0,pc=0;
	for(int i=0;i<16;i++)
	{
		for(int j=0;j<16;j++)
     52c:	21 96       	adiw	r28, 0x01	; 1
     52e:	c0 31       	cpi	r28, 0x10	; 16
     530:	d1 05       	cpc	r29, r1
     532:	09 f7       	brne	.-62     	; 0x4f6 <showColor+0x20>
		PORTB=PORTC=0;
}
void showColor(int mat[][16])
{
	unsigned char pb=0,pc=0;
	for(int i=0;i<16;i++)
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	e8 1a       	sub	r14, r24
     538:	f8 0a       	sbc	r15, r24
     53a:	e0 e2       	ldi	r30, 0x20	; 32
     53c:	ce 0e       	add	r12, r30
     53e:	d1 1c       	adc	r13, r1
     540:	f0 e1       	ldi	r31, 0x10	; 16
     542:	ef 16       	cp	r14, r31
     544:	f1 04       	cpc	r15, r1
     546:	21 f0       	breq	.+8      	; 0x550 <showColor+0x7a>
void showPointNull(int i,int j)
{
		PORTB=PORTC=0;
}
void showColor(int mat[][16])
{
     548:	86 01       	movw	r16, r12
     54a:	ca 2d       	mov	r28, r10
     54c:	db 2d       	mov	r29, r11
     54e:	d3 cf       	rjmp	.-90     	; 0x4f6 <showColor+0x20>
				_delay_us(15);
				
		}
		
	}
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	bf 90       	pop	r11
     562:	af 90       	pop	r10
     564:	08 95       	ret

00000566 <moveMothershipFull>:
}

int Mflag1=1,Mflag2=0;
void moveMothershipFull()
{
	if(Mflag1)
     566:	80 91 64 00 	lds	r24, 0x0064
     56a:	90 91 65 00 	lds	r25, 0x0065
     56e:	89 2b       	or	r24, r25
     570:	c1 f0       	breq	.+48     	; 0x5a2 <moveMothershipFull+0x3c>
	{
		Objects[2].y++;
     572:	80 91 ea 05 	lds	r24, 0x05EA
     576:	90 91 eb 05 	lds	r25, 0x05EB
     57a:	01 96       	adiw	r24, 0x01	; 1
		
		if(Objects[2].y>13){
     57c:	8e 30       	cpi	r24, 0x0E	; 14
     57e:	91 05       	cpc	r25, r1
     580:	2c f4       	brge	.+10     	; 0x58c <moveMothershipFull+0x26>
int Mflag1=1,Mflag2=0;
void moveMothershipFull()
{
	if(Mflag1)
	{
		Objects[2].y++;
     582:	90 93 eb 05 	sts	0x05EB, r25
     586:	80 93 ea 05 	sts	0x05EA, r24
     58a:	21 c0       	rjmp	.+66     	; 0x5ce <moveMothershipFull+0x68>
		
		if(Objects[2].y>13){
			Objects[2].y=13;
     58c:	8d e0       	ldi	r24, 0x0D	; 13
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	90 93 eb 05 	sts	0x05EB, r25
     594:	80 93 ea 05 	sts	0x05EA, r24
			
			Mflag1=0;
     598:	10 92 65 00 	sts	0x0065, r1
     59c:	10 92 64 00 	sts	0x0064, r1
     5a0:	16 c0       	rjmp	.+44     	; 0x5ce <moveMothershipFull+0x68>
		}
	}
	else
	{
		Objects[2].y--;
     5a2:	80 91 ea 05 	lds	r24, 0x05EA
     5a6:	90 91 eb 05 	lds	r25, 0x05EB
     5aa:	01 97       	sbiw	r24, 0x01	; 1
		
		if(Objects[2].y<0){
     5ac:	99 23       	and	r25, r25
     5ae:	2c f0       	brlt	.+10     	; 0x5ba <moveMothershipFull+0x54>
			Mflag1=0;
		}
	}
	else
	{
		Objects[2].y--;
     5b0:	90 93 eb 05 	sts	0x05EB, r25
     5b4:	80 93 ea 05 	sts	0x05EA, r24
     5b8:	0a c0       	rjmp	.+20     	; 0x5ce <moveMothershipFull+0x68>
		
		if(Objects[2].y<0){
			Objects[2].y=0 ;
     5ba:	10 92 eb 05 	sts	0x05EB, r1
     5be:	10 92 ea 05 	sts	0x05EA, r1
			
			Mflag1=1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	90 93 65 00 	sts	0x0065, r25
     5ca:	80 93 64 00 	sts	0x0064, r24
		}
	}
	
		if(Mflag2)
     5ce:	80 91 cc 03 	lds	r24, 0x03CC
     5d2:	90 91 cd 03 	lds	r25, 0x03CD
     5d6:	89 2b       	or	r24, r25
     5d8:	c1 f0       	breq	.+48     	; 0x60a <moveMothershipFull+0xa4>
		{
			Objects[3].y++;
     5da:	80 91 f5 05 	lds	r24, 0x05F5
     5de:	90 91 f6 05 	lds	r25, 0x05F6
     5e2:	01 96       	adiw	r24, 0x01	; 1
			
			if(Objects[3].y>13){
     5e4:	8e 30       	cpi	r24, 0x0E	; 14
     5e6:	91 05       	cpc	r25, r1
     5e8:	2c f4       	brge	.+10     	; 0x5f4 <moveMothershipFull+0x8e>
		}
	}
	
		if(Mflag2)
		{
			Objects[3].y++;
     5ea:	90 93 f6 05 	sts	0x05F6, r25
     5ee:	80 93 f5 05 	sts	0x05F5, r24
     5f2:	08 95       	ret
			
			if(Objects[3].y>13){
				Objects[3].y=13;
     5f4:	8d e0       	ldi	r24, 0x0D	; 13
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 f6 05 	sts	0x05F6, r25
     5fc:	80 93 f5 05 	sts	0x05F5, r24
				
				Mflag2=0;
     600:	10 92 cd 03 	sts	0x03CD, r1
     604:	10 92 cc 03 	sts	0x03CC, r1
     608:	08 95       	ret
			}
		}
		else
		{
			Objects[3].y--;
     60a:	80 91 f5 05 	lds	r24, 0x05F5
     60e:	90 91 f6 05 	lds	r25, 0x05F6
     612:	01 97       	sbiw	r24, 0x01	; 1
			
			if(Objects[3].y<0){
     614:	99 23       	and	r25, r25
     616:	2c f0       	brlt	.+10     	; 0x622 <moveMothershipFull+0xbc>
				Mflag2=0;
			}
		}
		else
		{
			Objects[3].y--;
     618:	90 93 f6 05 	sts	0x05F6, r25
     61c:	80 93 f5 05 	sts	0x05F5, r24
     620:	08 95       	ret
			
			if(Objects[3].y<0){
				Objects[3].y=0 ;
     622:	10 92 f6 05 	sts	0x05F6, r1
     626:	10 92 f5 05 	sts	0x05F5, r1
				
				Mflag2=1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	90 93 cd 03 	sts	0x03CD, r25
     632:	80 93 cc 03 	sts	0x03CC, r24
     636:	08 95       	ret

00000638 <moveEnemy>:
{
	int chek=0;
	for(int k=4;k<20;k++)
	{
		if(Objects[k].valid==false)chek++;
		if(Eflag)
     638:	40 91 ca 03 	lds	r20, 0x03CA
     63c:	50 91 cb 03 	lds	r21, 0x03CB
     640:	ee ef       	ldi	r30, 0xFE	; 254
     642:	f5 e0       	ldi	r31, 0x05	; 5
     644:	2e ea       	ldi	r18, 0xAE	; 174
     646:	36 e0       	ldi	r19, 0x06	; 6
     648:	41 15       	cp	r20, r1
     64a:	51 05       	cpc	r21, r1
     64c:	31 f0       	breq	.+12     	; 0x65a <moveEnemy+0x22>
			Objects[k].y++;
     64e:	82 81       	ldd	r24, Z+2	; 0x02
     650:	93 81       	ldd	r25, Z+3	; 0x03
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	93 83       	std	Z+3, r25	; 0x03
     656:	82 83       	std	Z+2, r24	; 0x02
     658:	05 c0       	rjmp	.+10     	; 0x664 <moveEnemy+0x2c>
		else
			Objects[k].y--;
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	93 83       	std	Z+3, r25	; 0x03
     662:	82 83       	std	Z+2, r24	; 0x02
		Objects[k].x++;
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	01 96       	adiw	r24, 0x01	; 1
     66a:	91 83       	std	Z+1, r25	; 0x01
     66c:	80 83       	st	Z, r24
		
		if(Objects[k].x>15)Objects[k].valid=false ;
     66e:	40 97       	sbiw	r24, 0x10	; 16
     670:	14 f0       	brlt	.+4      	; 0x676 <moveEnemy+0x3e>
     672:	15 82       	std	Z+5, r1	; 0x05
     674:	14 82       	std	Z+4, r1	; 0x04
     676:	3b 96       	adiw	r30, 0x0b	; 11
}
int Eflag=0;
void moveEnemy()
{
	int chek=0;
	for(int k=4;k<20;k++)
     678:	e2 17       	cp	r30, r18
     67a:	f3 07       	cpc	r31, r19
     67c:	29 f7       	brne	.-54     	; 0x648 <moveEnemy+0x10>
			Objects[k].y--;
		Objects[k].x++;
		
		if(Objects[k].x>15)Objects[k].valid=false ;
	}
	Eflag^=1 ;
     67e:	80 91 ca 03 	lds	r24, 0x03CA
     682:	90 91 cb 03 	lds	r25, 0x03CB
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	82 27       	eor	r24, r18
     68a:	90 93 cb 03 	sts	0x03CB, r25
     68e:	80 93 ca 03 	sts	0x03CA, r24
     692:	08 95       	ret

00000694 <moveFire>:
		//initializeObjects();
	}
}
void moveFire()
{
	if(Objects[1].valid){
     694:	80 91 e1 05 	lds	r24, 0x05E1
     698:	90 91 e2 05 	lds	r25, 0x05E2
     69c:	89 2b       	or	r24, r25
     69e:	69 f0       	breq	.+26     	; 0x6ba <moveFire+0x26>
		Objects[1].x--;
     6a0:	ed ed       	ldi	r30, 0xDD	; 221
     6a2:	f5 e0       	ldi	r31, 0x05	; 5
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
		if(Objects[1].x<0)Objects[1].valid=false ;
     6ae:	99 23       	and	r25, r25
     6b0:	24 f4       	brge	.+8      	; 0x6ba <moveFire+0x26>
     6b2:	10 92 e2 05 	sts	0x05E2, r1
     6b6:	10 92 e1 05 	sts	0x05E1, r1
     6ba:	08 95       	ret

000006bc <isTriggerAvailable>:
	}
}
float tVolt=3.0 ;
int isTriggerAvailable(){
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
		float volt;

		
			//configure-->reference voltage(2)-->ADCH,ADCL mode(1)-->input pin(4)
	    
		ADMUX = 0b01100100;
     6c0:	84 e6       	ldi	r24, 0x64	; 100
     6c2:	87 b9       	out	0x07, r24	; 7
			
			//configure-->ADC enable(1)-->ADC start conv(1)-->Auto-trigger(1)-->IF(1)-->IE(1)-->ADC clock cycle division factor(3)
		ADCSRA = 0b10000010;
     6c4:	82 e8       	ldi	r24, 0x82	; 130
     6c6:	86 b9       	out	0x06, r24	; 6
		
				//set ADSC bit of ADCSRA to start conversion
		ADCSRA |= (1<<ADSC);
     6c8:	36 9a       	sbi	0x06, 6	; 6
				

				//conversion is going on, so busy-wait
		while( ADCSRA & (1<<ADSC) )
     6ca:	36 99       	sbic	0x06, 6	; 6
     6cc:	fe cf       	rjmp	.-4      	; 0x6ca <isTriggerAvailable+0xe>

		//conversiond done

		//converted result
		result=0;
		result = ADCL;
     6ce:	84 b1       	in	r24, 0x04	; 4
     6d0:	90 e0       	ldi	r25, 0x00	; 0
		result = (result>>6) | (ADCH<<2);
     6d2:	00 24       	eor	r0, r0
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	00 1c       	adc	r0, r0
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	00 1c       	adc	r0, r0
     6e0:	89 2f       	mov	r24, r25
     6e2:	90 2d       	mov	r25, r0
     6e4:	65 b1       	in	r22, 0x05	; 5
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	66 0f       	add	r22, r22
     6ea:	77 1f       	adc	r23, r23
     6ec:	66 0f       	add	r22, r22
     6ee:	77 1f       	adc	r23, r23
     6f0:	68 2b       	or	r22, r24
     6f2:	79 2b       	or	r23, r25
			

		volt = result*(1.0*5.0/1024.0);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 2c 07 	call	0xe58	; 0xe58 <__floatunsisf>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 ea       	ldi	r20, 0xA0	; 160
     702:	5b e3       	ldi	r21, 0x3B	; 59
     704:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
		

		if(volt>tVolt){
     708:	c1 e0       	ldi	r28, 0x01	; 1
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	20 91 60 00 	lds	r18, 0x0060
     710:	30 91 61 00 	lds	r19, 0x0061
     714:	40 91 62 00 	lds	r20, 0x0062
     718:	50 91 63 00 	lds	r21, 0x0063
     71c:	0e 94 ba 07 	call	0xf74	; 0xf74 <__gesf2>
     720:	18 16       	cp	r1, r24
     722:	14 f0       	brlt	.+4      	; 0x728 <isTriggerAvailable+0x6c>
     724:	c0 e0       	ldi	r28, 0x00	; 0
     726:	d0 e0       	ldi	r29, 0x00	; 0
			//_delay_ms(3000);
			return true;
		}
		else return false ;
}
     728:	ce 01       	movw	r24, r28
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <triggerFire>:
void triggerFire()
{
	if(Objects[1].valid==false && Objects[0].valid==true  && isTriggerAvailable()==true )
     730:	80 91 e1 05 	lds	r24, 0x05E1
     734:	90 91 e2 05 	lds	r25, 0x05E2
     738:	89 2b       	or	r24, r25
     73a:	11 f5       	brne	.+68     	; 0x780 <triggerFire+0x50>
     73c:	80 91 d6 05 	lds	r24, 0x05D6
     740:	90 91 d7 05 	lds	r25, 0x05D7
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	e1 f4       	brne	.+56     	; 0x780 <triggerFire+0x50>
     748:	0e 94 5e 03 	call	0x6bc	; 0x6bc <isTriggerAvailable>
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	c1 f4       	brne	.+48     	; 0x780 <triggerFire+0x50>
	{
		Objects[1].valid=true;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 e2 05 	sts	0x05E2, r25
     758:	80 93 e1 05 	sts	0x05E1, r24
		Objects[1].x=Objects[0].x-1;
     75c:	80 91 d2 05 	lds	r24, 0x05D2
     760:	90 91 d3 05 	lds	r25, 0x05D3
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	90 93 de 05 	sts	0x05DE, r25
     76a:	80 93 dd 05 	sts	0x05DD, r24
		Objects[1].y=Objects[0].y+1;
     76e:	80 91 d4 05 	lds	r24, 0x05D4
     772:	90 91 d5 05 	lds	r25, 0x05D5
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	90 93 e0 05 	sts	0x05E0, r25
     77c:	80 93 df 05 	sts	0x05DF, r24
     780:	08 95       	ret

00000782 <__vector_1>:
	}
}
static volatile int pulse = 0;
static volatile int isHigh = 0;
ISR(INT0_vect)
{
     782:	1f 92       	push	r1
     784:	0f 92       	push	r0
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	0f 92       	push	r0
     78a:	11 24       	eor	r1, r1
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
	if (isHigh==1)
     790:	80 91 c6 03 	lds	r24, 0x03C6
     794:	90 91 c7 03 	lds	r25, 0x03C7
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	69 f4       	brne	.+26     	; 0x7b6 <__vector_1+0x34>
		{
		    TCCR1B=0; //disable counter
     79c:	1e bc       	out	0x2e, r1	; 46
		    pulse=TCNT1;//take the input in global variable
     79e:	8c b5       	in	r24, 0x2c	; 44
     7a0:	9d b5       	in	r25, 0x2d	; 45
     7a2:	90 93 c9 03 	sts	0x03C9, r25
     7a6:	80 93 c8 03 	sts	0x03C8, r24
		    TCNT1=0;	//clear the input
     7aa:	1d bc       	out	0x2d, r1	; 45
     7ac:	1c bc       	out	0x2c, r1	; 44
			    isHigh=0;	//reset state
     7ae:	10 92 c7 03 	sts	0x03C7, r1
     7b2:	10 92 c6 03 	sts	0x03C6, r1
		}
	if (isHigh==0)
     7b6:	80 91 c6 03 	lds	r24, 0x03C6
     7ba:	90 91 c7 03 	lds	r25, 0x03C7
     7be:	89 2b       	or	r24, r25
     7c0:	49 f4       	brne	.+18     	; 0x7d4 <__vector_1+0x52>
	{
		TCCR1B|=(1<<CS10); //enable counter
     7c2:	8e b5       	in	r24, 0x2e	; 46
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	8e bd       	out	0x2e, r24	; 46
		isHigh=1;		  //set the state to high
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	90 93 c7 03 	sts	0x03C7, r25
     7d0:	80 93 c6 03 	sts	0x03C6, r24
	}
}
     7d4:	9f 91       	pop	r25
     7d6:	8f 91       	pop	r24
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <movePlayer>:

void movePlayer()
{
	if(Objects[0].valid==false)return ;
     7e2:	80 91 d6 05 	lds	r24, 0x05D6
     7e6:	90 91 d7 05 	lds	r25, 0x05D7
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <movePlayer+0xe>
     7ee:	4c c0       	rjmp	.+152    	; 0x888 <__stack+0x29>
	DDRD = 0b11111011;
     7f0:	8b ef       	ldi	r24, 0xFB	; 251
     7f2:	81 bb       	out	0x11, r24	; 17
	GICR =(1<<INT0);
     7f4:	80 e4       	ldi	r24, 0x40	; 64
     7f6:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(1<<ISC00);
     7f8:	85 b7       	in	r24, 0x35	; 53
     7fa:	81 60       	ori	r24, 0x01	; 1
     7fc:	85 bf       	out	0x35, r24	; 53
	sei();
     7fe:	78 94       	sei
	
	int dist =0;
	
	PORTD|=(1<<PIND0);
     800:	90 9a       	sbi	0x12, 0	; 18
     802:	85 e0       	ldi	r24, 0x05	; 5
     804:	8a 95       	dec	r24
     806:	f1 f7       	brne	.-4      	; 0x804 <movePlayer+0x22>

	_delay_us(15);///triggering the sensor for 15usec

	PORTD &=~(1<<PIND0);
     808:	90 98       	cbi	0x12, 0	; 18

	dist = pulse/58;
     80a:	80 91 c8 03 	lds	r24, 0x03C8
     80e:	90 91 c9 03 	lds	r25, 0x03C9
     812:	6a e3       	ldi	r22, 0x3A	; 58
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
	
	
		if(dist<5)dist=5 ;
     81a:	65 30       	cpi	r22, 0x05	; 5
     81c:	71 05       	cpc	r23, r1
     81e:	34 f0       	brlt	.+12     	; 0x82c <movePlayer+0x4a>
     820:	6f 31       	cpi	r22, 0x1F	; 31
     822:	71 05       	cpc	r23, r1
     824:	2c f0       	brlt	.+10     	; 0x830 <movePlayer+0x4e>
     826:	6e e1       	ldi	r22, 0x1E	; 30
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	02 c0       	rjmp	.+4      	; 0x830 <movePlayer+0x4e>
     82c:	65 e0       	ldi	r22, 0x05	; 5
     82e:	70 e0       	ldi	r23, 0x00	; 0
			else if(dist>30)dist=30;

	
	Objects[0].y=((25-(dist-5.0))/25.0)*13;
     830:	88 27       	eor	r24, r24
     832:	77 fd       	sbrc	r23, 7
     834:	80 95       	com	r24
     836:	98 2f       	mov	r25, r24
     838:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__floatsisf>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 ea       	ldi	r20, 0xA0	; 160
     842:	50 e4       	ldi	r21, 0x40	; 64
     844:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     848:	9b 01       	movw	r18, r22
     84a:	ac 01       	movw	r20, r24
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	88 ec       	ldi	r24, 0xC8	; 200
     852:	91 e4       	ldi	r25, 0x41	; 65
     854:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__subsf3>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	48 ec       	ldi	r20, 0xC8	; 200
     85e:	51 e4       	ldi	r21, 0x41	; 65
     860:	0e 94 93 06 	call	0xd26	; 0xd26 <__divsf3>
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e5       	ldi	r20, 0x50	; 80
     86a:	51 e4       	ldi	r21, 0x41	; 65
     86c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     870:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fixsfsi>
     874:	70 93 d5 05 	sts	0x05D5, r23
     878:	60 93 d4 05 	sts	0x05D4, r22
	Objects[0].x=14 ;
     87c:	8e e0       	ldi	r24, 0x0E	; 14
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	90 93 d3 05 	sts	0x05D3, r25
     884:	80 93 d2 05 	sts	0x05D2, r24
     888:	08 95       	ret

0000088a <collidRectangle>:



int collidRectangle(int x1,int y1,int x2,int y2)
{
	if(x1>x2){
     88a:	48 17       	cp	r20, r24
     88c:	59 07       	cpc	r21, r25
     88e:	2c f4       	brge	.+10     	; 0x89a <collidRectangle+0x10>
     890:	f8 2f       	mov	r31, r24
     892:	e9 2f       	mov	r30, r25
		int t=x1;
		x1=x2;
     894:	ca 01       	movw	r24, r20
		x2=t ;
     896:	4f 2f       	mov	r20, r31
     898:	5e 2f       	mov	r21, r30
		 
		
	}
	if(y1>y2)
     89a:	26 17       	cp	r18, r22
     89c:	37 07       	cpc	r19, r23
     89e:	2c f4       	brge	.+10     	; 0x8aa <collidRectangle+0x20>
     8a0:	f6 2f       	mov	r31, r22
     8a2:	e7 2f       	mov	r30, r23
	{
		int t=y1 ;
		y1=y2;
     8a4:	b9 01       	movw	r22, r18
		y2=t ;
     8a6:	2f 2f       	mov	r18, r31
     8a8:	3e 2f       	mov	r19, r30
	}
	if(x2-x1>=2)return false ;
     8aa:	48 1b       	sub	r20, r24
     8ac:	59 0b       	sbc	r21, r25
     8ae:	42 30       	cpi	r20, 0x02	; 2
     8b0:	51 05       	cpc	r21, r1
     8b2:	4c f4       	brge	.+18     	; 0x8c6 <collidRectangle+0x3c>
	if(y2-y1>=3)return false ;
     8b4:	26 1b       	sub	r18, r22
     8b6:	37 0b       	sbc	r19, r23
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	23 30       	cpi	r18, 0x03	; 3
     8be:	31 05       	cpc	r19, r1
     8c0:	24 f0       	brlt	.+8      	; 0x8ca <collidRectangle+0x40>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	08 95       	ret
	{
		int t=y1 ;
		y1=y2;
		y2=t ;
	}
	if(x2-x1>=2)return false ;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
	if(y2-y1>=3)return false ;
	
	return true ;
}
     8ca:	08 95       	ret

000008cc <collisionDetection>:
void collisionDetection()
{
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
	///collision with Fire ;
	int x=Objects[1].x ;
     8e0:	40 91 dd 05 	lds	r20, 0x05DD
     8e4:	50 91 de 05 	lds	r21, 0x05DE
	int y=Objects[1].y ;
     8e8:	c0 91 df 05 	lds	r28, 0x05DF
     8ec:	d0 91 e0 05 	lds	r29, 0x05E0
     8f0:	00 91 ce 03 	lds	r16, 0x03CE
     8f4:	10 91 cf 03 	lds	r17, 0x03CF
     8f8:	e8 ee       	ldi	r30, 0xE8	; 232
     8fa:	f5 e0       	ldi	r31, 0x05	; 5
	
	for(int k=2;k<20;k++)
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	90 e0       	ldi	r25, 0x00	; 0
		int kx=Objects[k].x ;
		int ky=Objects[k].y ;
		if(x>=kx && x<=kx+1 && y >=ky && y <= ky+2)
		{
			Objects[k].valid=false ;
			Objects[1].valid=false ;
     900:	0f 2e       	mov	r0, r31
     902:	f1 ee       	ldi	r31, 0xE1	; 225
     904:	ef 2e       	mov	r14, r31
     906:	f5 e0       	ldi	r31, 0x05	; 5
     908:	ff 2e       	mov	r15, r31
     90a:	f0 2d       	mov	r31, r0
	int x=Objects[1].x ;
	int y=Objects[1].y ;
	
	for(int k=2;k<20;k++)
	{
		if(Objects[k].valid==false)continue;
     90c:	24 81       	ldd	r18, Z+4	; 0x04
     90e:	35 81       	ldd	r19, Z+5	; 0x05
     910:	23 2b       	or	r18, r19
     912:	31 f1       	breq	.+76     	; 0x960 <collisionDetection+0x94>
		int kx=Objects[k].x ;
     914:	20 81       	ld	r18, Z
     916:	31 81       	ldd	r19, Z+1	; 0x01
		int ky=Objects[k].y ;
     918:	62 81       	ldd	r22, Z+2	; 0x02
     91a:	73 81       	ldd	r23, Z+3	; 0x03
		if(x>=kx && x<=kx+1 && y >=ky && y <= ky+2)
     91c:	42 17       	cp	r20, r18
     91e:	53 07       	cpc	r21, r19
     920:	fc f0       	brlt	.+62     	; 0x960 <collisionDetection+0x94>
     922:	2f 5f       	subi	r18, 0xFF	; 255
     924:	3f 4f       	sbci	r19, 0xFF	; 255
     926:	24 17       	cp	r18, r20
     928:	35 07       	cpc	r19, r21
     92a:	d4 f0       	brlt	.+52     	; 0x960 <collisionDetection+0x94>
     92c:	c6 17       	cp	r28, r22
     92e:	d7 07       	cpc	r29, r23
     930:	bc f0       	brlt	.+46     	; 0x960 <collisionDetection+0x94>
     932:	6e 5f       	subi	r22, 0xFE	; 254
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	6c 17       	cp	r22, r28
     938:	7d 07       	cpc	r23, r29
     93a:	94 f0       	brlt	.+36     	; 0x960 <collisionDetection+0x94>
		{
			Objects[k].valid=false ;
     93c:	15 82       	std	Z+5, r1	; 0x05
     93e:	14 82       	std	Z+4, r1	; 0x04
			Objects[1].valid=false ;
     940:	d7 01       	movw	r26, r14
     942:	1d 92       	st	X+, r1
     944:	1c 92       	st	X, r1
			
			// updating score ... 
			if(k>3)
     946:	84 30       	cpi	r24, 0x04	; 4
     948:	91 05       	cpc	r25, r1
     94a:	1c f0       	brlt	.+6      	; 0x952 <collisionDetection+0x86>
			score ++ ;
     94c:	0f 5f       	subi	r16, 0xFF	; 255
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	07 c0       	rjmp	.+14     	; 0x960 <collisionDetection+0x94>
			else score *=5 ;
     952:	98 01       	movw	r18, r16
     954:	22 0f       	add	r18, r18
     956:	33 1f       	adc	r19, r19
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	02 0f       	add	r16, r18
     95e:	13 1f       	adc	r17, r19
{
	///collision with Fire ;
	int x=Objects[1].x ;
	int y=Objects[1].y ;
	
	for(int k=2;k<20;k++)
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	3b 96       	adiw	r30, 0x0b	; 11
     964:	84 31       	cpi	r24, 0x14	; 20
     966:	91 05       	cpc	r25, r1
     968:	89 f6       	brne	.-94     	; 0x90c <collisionDetection+0x40>
     96a:	10 93 cf 03 	sts	0x03CF, r17
     96e:	00 93 ce 03 	sts	0x03CE, r16
		}
		
	}
	
	///collision with Player ;
	 x=Objects[0].x ;
     972:	c0 90 d2 05 	lds	r12, 0x05D2
     976:	d0 90 d3 05 	lds	r13, 0x05D3
	 y=Objects[0].y ;
     97a:	e0 90 d4 05 	lds	r14, 0x05D4
     97e:	f0 90 d5 05 	lds	r15, 0x05D5
     982:	ce ef       	ldi	r28, 0xFE	; 254
     984:	d5 e0       	ldi	r29, 0x05	; 5
     986:	0e ea       	ldi	r16, 0xAE	; 174
     988:	16 e0       	ldi	r17, 0x06	; 6
		if(Objects[k].valid==false)continue;
		int kx=Objects[k].x ;
		int ky=Objects[k].y ;
		if(collidRectangle(x,y,kx,ky))
		{
			Objects[0].valid=false ;
     98a:	0f 2e       	mov	r0, r31
     98c:	f6 ed       	ldi	r31, 0xD6	; 214
     98e:	af 2e       	mov	r10, r31
     990:	f5 e0       	ldi	r31, 0x05	; 5
     992:	bf 2e       	mov	r11, r31
     994:	f0 2d       	mov	r31, r0
	 x=Objects[0].x ;
	 y=Objects[0].y ;
	
	for(int k=4;k<20;k++)
	{
		if(Objects[k].valid==false)continue;
     996:	2c 81       	ldd	r18, Y+4	; 0x04
     998:	3d 81       	ldd	r19, Y+5	; 0x05
     99a:	23 2b       	or	r18, r19
     99c:	69 f0       	breq	.+26     	; 0x9b8 <collisionDetection+0xec>
		int kx=Objects[k].x ;
		int ky=Objects[k].y ;
		if(collidRectangle(x,y,kx,ky))
     99e:	2a 81       	ldd	r18, Y+2	; 0x02
     9a0:	3b 81       	ldd	r19, Y+3	; 0x03
     9a2:	48 81       	ld	r20, Y
     9a4:	59 81       	ldd	r21, Y+1	; 0x01
     9a6:	b7 01       	movw	r22, r14
     9a8:	c6 01       	movw	r24, r12
     9aa:	0e 94 45 04 	call	0x88a	; 0x88a <collidRectangle>
     9ae:	89 2b       	or	r24, r25
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <collisionDetection+0xec>
		{
			Objects[0].valid=false ;
     9b2:	f5 01       	movw	r30, r10
     9b4:	11 82       	std	Z+1, r1	; 0x01
     9b6:	10 82       	st	Z, r1
     9b8:	2b 96       	adiw	r28, 0x0b	; 11
	
	///collision with Player ;
	 x=Objects[0].x ;
	 y=Objects[0].y ;
	
	for(int k=4;k<20;k++)
     9ba:	c0 17       	cp	r28, r16
     9bc:	d1 07       	cpc	r29, r17
     9be:	59 f7       	brne	.-42     	; 0x996 <collisionDetection+0xca>
			Objects[0].valid=false ;
		}
		
	}
	
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	08 95       	ret

000009d6 <loadNumber>:
void loadNumber(int x,int y,int num,int mat[][16])
{
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
	for(int i=x;i<x+9;i++)
     9e6:	fc 01       	movw	r30, r24
     9e8:	39 96       	adiw	r30, 0x09	; 9
     9ea:	8e 17       	cp	r24, r30
     9ec:	9f 07       	cpc	r25, r31
     9ee:	cc f5       	brge	.+114    	; 0xa62 <loadNumber+0x8c>
     9f0:	e8 e4       	ldi	r30, 0x48	; 72
     9f2:	e4 9f       	mul	r30, r20
     9f4:	80 01       	movw	r16, r0
     9f6:	e5 9f       	mul	r30, r21
     9f8:	10 0d       	add	r17, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	0a 59       	subi	r16, 0x9A	; 154
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	82 95       	swap	r24
     a02:	92 95       	swap	r25
     a04:	90 7f       	andi	r25, 0xF0	; 240
     a06:	98 27       	eor	r25, r24
     a08:	80 7f       	andi	r24, 0xF0	; 240
     a0a:	98 27       	eor	r25, r24
     a0c:	86 0f       	add	r24, r22
     a0e:	97 1f       	adc	r25, r23
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	e9 01       	movw	r28, r18
     a16:	c8 0f       	add	r28, r24
     a18:	d9 1f       	adc	r29, r25
     a1a:	79 01       	movw	r14, r18
     a1c:	40 ee       	ldi	r20, 0xE0	; 224
     a1e:	e4 1a       	sub	r14, r20
     a20:	4e ef       	ldi	r20, 0xFE	; 254
     a22:	f4 0a       	sbc	r15, r20
     a24:	e8 0e       	add	r14, r24
     a26:	f9 1e       	adc	r15, r25
	{
		for(int j=y;j<y+4;j++)mat[i][j]=number[num][i-x][j-y] ;
     a28:	9b 01       	movw	r18, r22
     a2a:	2c 5f       	subi	r18, 0xFC	; 252
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	68 94       	set
     a30:	cc 24       	eor	r12, r12
     a32:	c2 f8       	bld	r12, 2
     a34:	d1 2c       	mov	r13, r1
     a36:	0d c0       	rjmp	.+26     	; 0xa52 <loadNumber+0x7c>
     a38:	41 91       	ld	r20, Z+
     a3a:	51 91       	ld	r21, Z+
     a3c:	4d 93       	st	X+, r20
     a3e:	5d 93       	st	X+, r21
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	00 97       	sbiw	r24, 0x00	; 0
     a44:	c9 f7       	brne	.-14     	; 0xa38 <loadNumber+0x62>
     a46:	08 5f       	subi	r16, 0xF8	; 248
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	a0 96       	adiw	r28, 0x20	; 32
	}
	
}
void loadNumber(int x,int y,int num,int mat[][16])
{
	for(int i=x;i<x+9;i++)
     a4c:	ce 15       	cp	r28, r14
     a4e:	df 05       	cpc	r29, r15
     a50:	41 f0       	breq	.+16     	; 0xa62 <loadNumber+0x8c>
	{
		for(int j=y;j<y+4;j++)mat[i][j]=number[num][i-x][j-y] ;
     a52:	62 17       	cp	r22, r18
     a54:	73 07       	cpc	r23, r19
     a56:	bc f7       	brge	.-18     	; 0xa46 <loadNumber+0x70>
     a58:	de 01       	movw	r26, r28
     a5a:	f8 01       	movw	r30, r16
     a5c:	8c 2d       	mov	r24, r12
     a5e:	9d 2d       	mov	r25, r13
     a60:	eb cf       	rjmp	.-42     	; 0xa38 <loadNumber+0x62>
	}
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	08 95       	ret

00000a74 <loadScore>:
void moveScore()
{
	
}
void loadScore(int mat[][16])
{
     a74:	ef 92       	push	r14
     a76:	ff 92       	push	r15
     a78:	0f 93       	push	r16
     a7a:	1f 93       	push	r17
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	e8 2e       	mov	r14, r24
     a82:	f9 2e       	mov	r15, r25
     a84:	68 2f       	mov	r22, r24
     a86:	79 2f       	mov	r23, r25
	for(int i=0;i<16;i++)
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
void moveScore()
{
	
}
void loadScore(int mat[][16])
{
     a8c:	90 e1       	ldi	r25, 0x10	; 16
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0d c0       	rjmp	.+26     	; 0xaac <loadScore+0x38>
	for(int i=0;i<16;i++)
	{
		for(int j=0;j<16;j++)mat[i][j]=0;
     a92:	11 92       	st	Z+, r1
     a94:	11 92       	st	Z+, r1
     a96:	41 50       	subi	r20, 0x01	; 1
     a98:	51 09       	sbc	r21, r1
     a9a:	41 15       	cp	r20, r1
     a9c:	51 05       	cpc	r21, r1
     a9e:	c9 f7       	brne	.-14     	; 0xa92 <loadScore+0x1e>
{
	
}
void loadScore(int mat[][16])
{
	for(int i=0;i<16;i++)
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	60 5e       	subi	r22, 0xE0	; 224
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	a0 31       	cpi	r26, 0x10	; 16
     aa8:	b1 05       	cpc	r27, r1
     aaa:	21 f0       	breq	.+8      	; 0xab4 <loadScore+0x40>
void moveScore()
{
	
}
void loadScore(int mat[][16])
{
     aac:	fb 01       	movw	r30, r22
     aae:	49 2f       	mov	r20, r25
     ab0:	58 2f       	mov	r21, r24
     ab2:	ef cf       	rjmp	.-34     	; 0xa92 <loadScore+0x1e>
	for(int i=0;i<16;i++)
	{
		for(int j=0;j<16;j++)mat[i][j]=0;
	}
	int one,two,three ;
	three=score%10 ;
     ab4:	80 91 ce 03 	lds	r24, 0x03CE
     ab8:	90 91 cf 03 	lds	r25, 0x03CF
	score/=10;
     abc:	ea e0       	ldi	r30, 0x0A	; 10
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	bf 01       	movw	r22, r30
     ac2:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
     ac6:	ec 01       	movw	r28, r24
	two=score%10;
	score/=10;
     ac8:	cb 01       	movw	r24, r22
     aca:	bf 01       	movw	r22, r30
     acc:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
     ad0:	8c 01       	movw	r16, r24
     ad2:	70 93 cf 03 	sts	0x03CF, r23
     ad6:	60 93 ce 03 	sts	0x03CE, r22
	one =score%10;
     ada:	cb 01       	movw	r24, r22
     adc:	bf 01       	movw	r22, r30
     ade:	0e 94 45 08 	call	0x108a	; 0x108a <__divmodhi4>
	loadNumber(3,baseNum,one,mat);
     ae2:	2e 2d       	mov	r18, r14
     ae4:	3f 2d       	mov	r19, r15
     ae6:	ac 01       	movw	r20, r24
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <loadNumber>
	loadNumber(3,baseNum+5,two,mat);
     af4:	2e 2d       	mov	r18, r14
     af6:	3f 2d       	mov	r19, r15
     af8:	a8 01       	movw	r20, r16
     afa:	65 e0       	ldi	r22, 0x05	; 5
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <loadNumber>
	loadNumber(3,baseNum+10,three,mat);
     b06:	2e 2d       	mov	r18, r14
     b08:	3f 2d       	mov	r19, r15
     b0a:	ae 01       	movw	r20, r28
     b0c:	6a e0       	ldi	r22, 0x0A	; 10
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <loadNumber>
	
	
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <main>:
	loadObjectsColor(output);
	unsigned long cnt=0;
    while(1)
    {
        //TODO:: Please write your application code 
		if(cnt%60==0)moveEnemy();
     b26:	0f 2e       	mov	r0, r31
     b28:	fc e3       	ldi	r31, 0x3C	; 60
     b2a:	4f 2e       	mov	r4, r31
     b2c:	51 2c       	mov	r5, r1
     b2e:	61 2c       	mov	r6, r1
     b30:	71 2c       	mov	r7, r1
     b32:	f0 2d       	mov	r31, r0
		if(cnt%5==0){
     b34:	0f 2e       	mov	r0, r31
     b36:	f5 e0       	ldi	r31, 0x05	; 5
     b38:	8f 2e       	mov	r8, r31
     b3a:	91 2c       	mov	r9, r1
     b3c:	a1 2c       	mov	r10, r1
     b3e:	b1 2c       	mov	r11, r1
     b40:	f0 2d       	mov	r31, r0
		initializeColor();
		
		collisionDetection();
		
			loadObjectsColor(output);
		if(Objects[0].valid==false ||(Objects[2].valid==false && Objects[3].valid==false))
     b42:	c6 ed       	ldi	r28, 0xD6	; 214
     b44:	d5 e0       	ldi	r29, 0x05	; 5
     b46:	0c ee       	ldi	r16, 0xEC	; 236
     b48:	15 e0       	ldi	r17, 0x05	; 5
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f7 ef       	ldi	r31, 0xF7	; 247
     b4e:	2f 2e       	mov	r2, r31
     b50:	f5 e0       	ldi	r31, 0x05	; 5
     b52:	3f 2e       	mov	r3, r31
     b54:	f0 2d       	mov	r31, r0
}
int main(void)
{
	
	while(1){
	score=0;
     b56:	10 92 cf 03 	sts	0x03CF, r1
     b5a:	10 92 ce 03 	sts	0x03CE, r1
	initializeColor();
     b5e:	0e 94 1b 02 	call	0x436	; 0x436 <initializeColor>
	initializeObjects();
     b62:	0e 94 49 00 	call	0x92	; 0x92 <initializeObjects>
	loadObjectsColor(output);
     b66:	80 ed       	ldi	r24, 0xD0	; 208
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <loadObjectsColor>
	unsigned long cnt=0;
     b6e:	c1 2c       	mov	r12, r1
     b70:	d1 2c       	mov	r13, r1
     b72:	e1 2c       	mov	r14, r1
     b74:	f1 2c       	mov	r15, r1
    while(1)
    {
        //TODO:: Please write your application code 
		if(cnt%60==0)moveEnemy();
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	a3 01       	movw	r20, r6
     b7c:	92 01       	movw	r18, r4
     b7e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__udivmodsi4>
     b82:	67 2b       	or	r22, r23
     b84:	68 2b       	or	r22, r24
     b86:	69 2b       	or	r22, r25
     b88:	11 f4       	brne	.+4      	; 0xb8e <main+0x68>
     b8a:	0e 94 1c 03 	call	0x638	; 0x638 <moveEnemy>
		if(cnt%5==0){
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
     b92:	a5 01       	movw	r20, r10
     b94:	94 01       	movw	r18, r8
     b96:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__udivmodsi4>
     b9a:	67 2b       	or	r22, r23
     b9c:	68 2b       	or	r22, r24
     b9e:	69 2b       	or	r22, r25
     ba0:	11 f4       	brne	.+4      	; 0xba6 <main+0x80>
			moveMothershipFull();
     ba2:	0e 94 b3 02 	call	0x566	; 0x566 <moveMothershipFull>
			//test ...
			//testPlayer();
			//initializeObjects();
			
		}
		if(cnt%10==0)movePlayer();
     ba6:	c7 01       	movw	r24, r14
     ba8:	b6 01       	movw	r22, r12
     baa:	2a e0       	ldi	r18, 0x0A	; 10
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__udivmodsi4>
     bb6:	67 2b       	or	r22, r23
     bb8:	68 2b       	or	r22, r24
     bba:	69 2b       	or	r22, r25
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <main+0x9c>
     bbe:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <movePlayer>
		//showAll();
		
		
		
		triggerFire();
     bc2:	0e 94 98 03 	call	0x730	; 0x730 <triggerFire>
		if(cnt%2==0)
     bc6:	c0 fe       	sbrs	r12, 0
		moveFire();
     bc8:	0e 94 4a 03 	call	0x694	; 0x694 <moveFire>
		initializeColor();
     bcc:	0e 94 1b 02 	call	0x436	; 0x436 <initializeColor>
		
		collisionDetection();
     bd0:	0e 94 66 04 	call	0x8cc	; 0x8cc <collisionDetection>
		
			loadObjectsColor(output);
     bd4:	80 ed       	ldi	r24, 0xD0	; 208
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <loadObjectsColor>
		if(Objects[0].valid==false ||(Objects[2].valid==false && Objects[3].valid==false))
     bdc:	88 81       	ld	r24, Y
     bde:	99 81       	ldd	r25, Y+1	; 0x01
     be0:	89 2b       	or	r24, r25
     be2:	a1 f0       	breq	.+40     	; 0xc0c <main+0xe6>
     be4:	f8 01       	movw	r30, r16
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	89 2b       	or	r24, r25
     bec:	29 f4       	brne	.+10     	; 0xbf8 <main+0xd2>
     bee:	f1 01       	movw	r30, r2
     bf0:	80 81       	ld	r24, Z
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	89 2b       	or	r24, r25
     bf6:	51 f0       	breq	.+20     	; 0xc0c <main+0xe6>
			break ;
		showColor(output);
     bf8:	80 ed       	ldi	r24, 0xD0	; 208
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <showColor>
		//show0(start);
		//showMat2();
		cnt++;
     c00:	ff ef       	ldi	r31, 0xFF	; 255
     c02:	cf 1a       	sub	r12, r31
     c04:	df 0a       	sbc	r13, r31
     c06:	ef 0a       	sbc	r14, r31
     c08:	ff 0a       	sbc	r15, r31
		
		
    }
     c0a:	b5 cf       	rjmp	.-150    	; 0xb76 <main+0x50>
	
	loadScore(output);
     c0c:	80 ed       	ldi	r24, 0xD0	; 208
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	0e 94 3a 05 	call	0xa74	; 0xa74 <loadScore>
	tVolt=3.7 ;
     c14:	8d ec       	ldi	r24, 0xCD	; 205
     c16:	9c ec       	ldi	r25, 0xCC	; 204
     c18:	ac e6       	ldi	r26, 0x6C	; 108
     c1a:	b0 e4       	ldi	r27, 0x40	; 64
     c1c:	80 93 60 00 	sts	0x0060, r24
     c20:	90 93 61 00 	sts	0x0061, r25
     c24:	a0 93 62 00 	sts	0x0062, r26
     c28:	b0 93 63 00 	sts	0x0063, r27
	while(isTriggerAvailable()==false)
     c2c:	06 c0       	rjmp	.+12     	; 0xc3a <main+0x114>
	{
		initializeColor();
     c2e:	0e 94 1b 02 	call	0x436	; 0x436 <initializeColor>
		showColor(output);
     c32:	80 ed       	ldi	r24, 0xD0	; 208
     c34:	93 e0       	ldi	r25, 0x03	; 3
     c36:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <showColor>
		
    }
	
	loadScore(output);
	tVolt=3.7 ;
	while(isTriggerAvailable()==false)
     c3a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <isTriggerAvailable>
     c3e:	89 2b       	or	r24, r25
     c40:	b1 f3       	breq	.-20     	; 0xc2e <main+0x108>
	{
		initializeColor();
		showColor(output);
	}
	tVolt=3.0;
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	b0 e4       	ldi	r27, 0x40	; 64
     c4a:	80 93 60 00 	sts	0x0060, r24
     c4e:	90 93 61 00 	sts	0x0061, r25
     c52:	a0 93 62 00 	sts	0x0062, r26
     c56:	b0 93 63 00 	sts	0x0063, r27
	}
     c5a:	7d cf       	rjmp	.-262    	; 0xb56 <main+0x30>

00000c5c <__subsf3>:
     c5c:	50 58       	subi	r21, 0x80	; 128

00000c5e <__addsf3>:
     c5e:	bb 27       	eor	r27, r27
     c60:	aa 27       	eor	r26, r26
     c62:	0e d0       	rcall	.+28     	; 0xc80 <__addsf3x>
     c64:	4d c1       	rjmp	.+666    	; 0xf00 <__fp_round>
     c66:	3e d1       	rcall	.+636    	; 0xee4 <__fp_pscA>
     c68:	30 f0       	brcs	.+12     	; 0xc76 <__addsf3+0x18>
     c6a:	43 d1       	rcall	.+646    	; 0xef2 <__fp_pscB>
     c6c:	20 f0       	brcs	.+8      	; 0xc76 <__addsf3+0x18>
     c6e:	31 f4       	brne	.+12     	; 0xc7c <__addsf3+0x1e>
     c70:	9f 3f       	cpi	r25, 0xFF	; 255
     c72:	11 f4       	brne	.+4      	; 0xc78 <__addsf3+0x1a>
     c74:	1e f4       	brtc	.+6      	; 0xc7c <__addsf3+0x1e>
     c76:	33 c1       	rjmp	.+614    	; 0xede <__fp_nan>
     c78:	0e f4       	brtc	.+2      	; 0xc7c <__addsf3+0x1e>
     c7a:	e0 95       	com	r30
     c7c:	e7 fb       	bst	r30, 7
     c7e:	29 c1       	rjmp	.+594    	; 0xed2 <__fp_inf>

00000c80 <__addsf3x>:
     c80:	e9 2f       	mov	r30, r25
     c82:	4f d1       	rcall	.+670    	; 0xf22 <__fp_split3>
     c84:	80 f3       	brcs	.-32     	; 0xc66 <__addsf3+0x8>
     c86:	ba 17       	cp	r27, r26
     c88:	62 07       	cpc	r22, r18
     c8a:	73 07       	cpc	r23, r19
     c8c:	84 07       	cpc	r24, r20
     c8e:	95 07       	cpc	r25, r21
     c90:	18 f0       	brcs	.+6      	; 0xc98 <__addsf3x+0x18>
     c92:	71 f4       	brne	.+28     	; 0xcb0 <__addsf3x+0x30>
     c94:	9e f5       	brtc	.+102    	; 0xcfc <__addsf3x+0x7c>
     c96:	67 c1       	rjmp	.+718    	; 0xf66 <__fp_zero>
     c98:	0e f4       	brtc	.+2      	; 0xc9c <__addsf3x+0x1c>
     c9a:	e0 95       	com	r30
     c9c:	0b 2e       	mov	r0, r27
     c9e:	ba 2f       	mov	r27, r26
     ca0:	a0 2d       	mov	r26, r0
     ca2:	0b 01       	movw	r0, r22
     ca4:	b9 01       	movw	r22, r18
     ca6:	90 01       	movw	r18, r0
     ca8:	0c 01       	movw	r0, r24
     caa:	ca 01       	movw	r24, r20
     cac:	a0 01       	movw	r20, r0
     cae:	11 24       	eor	r1, r1
     cb0:	ff 27       	eor	r31, r31
     cb2:	59 1b       	sub	r21, r25
     cb4:	99 f0       	breq	.+38     	; 0xcdc <__addsf3x+0x5c>
     cb6:	59 3f       	cpi	r21, 0xF9	; 249
     cb8:	50 f4       	brcc	.+20     	; 0xcce <__addsf3x+0x4e>
     cba:	50 3e       	cpi	r21, 0xE0	; 224
     cbc:	68 f1       	brcs	.+90     	; 0xd18 <__addsf3x+0x98>
     cbe:	1a 16       	cp	r1, r26
     cc0:	f0 40       	sbci	r31, 0x00	; 0
     cc2:	a2 2f       	mov	r26, r18
     cc4:	23 2f       	mov	r18, r19
     cc6:	34 2f       	mov	r19, r20
     cc8:	44 27       	eor	r20, r20
     cca:	58 5f       	subi	r21, 0xF8	; 248
     ccc:	f3 cf       	rjmp	.-26     	; 0xcb4 <__addsf3x+0x34>
     cce:	46 95       	lsr	r20
     cd0:	37 95       	ror	r19
     cd2:	27 95       	ror	r18
     cd4:	a7 95       	ror	r26
     cd6:	f0 40       	sbci	r31, 0x00	; 0
     cd8:	53 95       	inc	r21
     cda:	c9 f7       	brne	.-14     	; 0xcce <__addsf3x+0x4e>
     cdc:	7e f4       	brtc	.+30     	; 0xcfc <__addsf3x+0x7c>
     cde:	1f 16       	cp	r1, r31
     ce0:	ba 0b       	sbc	r27, r26
     ce2:	62 0b       	sbc	r22, r18
     ce4:	73 0b       	sbc	r23, r19
     ce6:	84 0b       	sbc	r24, r20
     ce8:	ba f0       	brmi	.+46     	; 0xd18 <__addsf3x+0x98>
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	a1 f0       	breq	.+40     	; 0xd16 <__addsf3x+0x96>
     cee:	ff 0f       	add	r31, r31
     cf0:	bb 1f       	adc	r27, r27
     cf2:	66 1f       	adc	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	88 1f       	adc	r24, r24
     cf8:	c2 f7       	brpl	.-16     	; 0xcea <__addsf3x+0x6a>
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <__addsf3x+0x98>
     cfc:	ba 0f       	add	r27, r26
     cfe:	62 1f       	adc	r22, r18
     d00:	73 1f       	adc	r23, r19
     d02:	84 1f       	adc	r24, r20
     d04:	48 f4       	brcc	.+18     	; 0xd18 <__addsf3x+0x98>
     d06:	87 95       	ror	r24
     d08:	77 95       	ror	r23
     d0a:	67 95       	ror	r22
     d0c:	b7 95       	ror	r27
     d0e:	f7 95       	ror	r31
     d10:	9e 3f       	cpi	r25, 0xFE	; 254
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__addsf3x+0x96>
     d14:	b3 cf       	rjmp	.-154    	; 0xc7c <__addsf3+0x1e>
     d16:	93 95       	inc	r25
     d18:	88 0f       	add	r24, r24
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <__addsf3x+0x9e>
     d1c:	99 27       	eor	r25, r25
     d1e:	ee 0f       	add	r30, r30
     d20:	97 95       	ror	r25
     d22:	87 95       	ror	r24
     d24:	08 95       	ret

00000d26 <__divsf3>:
     d26:	0c d0       	rcall	.+24     	; 0xd40 <__divsf3x>
     d28:	eb c0       	rjmp	.+470    	; 0xf00 <__fp_round>
     d2a:	e3 d0       	rcall	.+454    	; 0xef2 <__fp_pscB>
     d2c:	40 f0       	brcs	.+16     	; 0xd3e <__divsf3+0x18>
     d2e:	da d0       	rcall	.+436    	; 0xee4 <__fp_pscA>
     d30:	30 f0       	brcs	.+12     	; 0xd3e <__divsf3+0x18>
     d32:	21 f4       	brne	.+8      	; 0xd3c <__divsf3+0x16>
     d34:	5f 3f       	cpi	r21, 0xFF	; 255
     d36:	19 f0       	breq	.+6      	; 0xd3e <__divsf3+0x18>
     d38:	cc c0       	rjmp	.+408    	; 0xed2 <__fp_inf>
     d3a:	51 11       	cpse	r21, r1
     d3c:	15 c1       	rjmp	.+554    	; 0xf68 <__fp_szero>
     d3e:	cf c0       	rjmp	.+414    	; 0xede <__fp_nan>

00000d40 <__divsf3x>:
     d40:	f0 d0       	rcall	.+480    	; 0xf22 <__fp_split3>
     d42:	98 f3       	brcs	.-26     	; 0xd2a <__divsf3+0x4>

00000d44 <__divsf3_pse>:
     d44:	99 23       	and	r25, r25
     d46:	c9 f3       	breq	.-14     	; 0xd3a <__divsf3+0x14>
     d48:	55 23       	and	r21, r21
     d4a:	b1 f3       	breq	.-20     	; 0xd38 <__divsf3+0x12>
     d4c:	95 1b       	sub	r25, r21
     d4e:	55 0b       	sbc	r21, r21
     d50:	bb 27       	eor	r27, r27
     d52:	aa 27       	eor	r26, r26
     d54:	62 17       	cp	r22, r18
     d56:	73 07       	cpc	r23, r19
     d58:	84 07       	cpc	r24, r20
     d5a:	38 f0       	brcs	.+14     	; 0xd6a <__divsf3_pse+0x26>
     d5c:	9f 5f       	subi	r25, 0xFF	; 255
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	44 1f       	adc	r20, r20
     d66:	aa 1f       	adc	r26, r26
     d68:	a9 f3       	breq	.-22     	; 0xd54 <__divsf3_pse+0x10>
     d6a:	33 d0       	rcall	.+102    	; 0xdd2 <__divsf3_pse+0x8e>
     d6c:	0e 2e       	mov	r0, r30
     d6e:	3a f0       	brmi	.+14     	; 0xd7e <__divsf3_pse+0x3a>
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	30 d0       	rcall	.+96     	; 0xdd4 <__divsf3_pse+0x90>
     d74:	91 50       	subi	r25, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	e6 95       	lsr	r30
     d7a:	00 1c       	adc	r0, r0
     d7c:	ca f7       	brpl	.-14     	; 0xd70 <__divsf3_pse+0x2c>
     d7e:	29 d0       	rcall	.+82     	; 0xdd2 <__divsf3_pse+0x8e>
     d80:	fe 2f       	mov	r31, r30
     d82:	27 d0       	rcall	.+78     	; 0xdd2 <__divsf3_pse+0x8e>
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	bb 1f       	adc	r27, r27
     d8c:	26 17       	cp	r18, r22
     d8e:	37 07       	cpc	r19, r23
     d90:	48 07       	cpc	r20, r24
     d92:	ab 07       	cpc	r26, r27
     d94:	b0 e8       	ldi	r27, 0x80	; 128
     d96:	09 f0       	breq	.+2      	; 0xd9a <__divsf3_pse+0x56>
     d98:	bb 0b       	sbc	r27, r27
     d9a:	80 2d       	mov	r24, r0
     d9c:	bf 01       	movw	r22, r30
     d9e:	ff 27       	eor	r31, r31
     da0:	93 58       	subi	r25, 0x83	; 131
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__divsf3_pse+0x6c>
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	51 05       	cpc	r21, r1
     daa:	68 f0       	brcs	.+26     	; 0xdc6 <__divsf3_pse+0x82>
     dac:	92 c0       	rjmp	.+292    	; 0xed2 <__fp_inf>
     dae:	dc c0       	rjmp	.+440    	; 0xf68 <__fp_szero>
     db0:	5f 3f       	cpi	r21, 0xFF	; 255
     db2:	ec f3       	brlt	.-6      	; 0xdae <__divsf3_pse+0x6a>
     db4:	98 3e       	cpi	r25, 0xE8	; 232
     db6:	dc f3       	brlt	.-10     	; 0xdae <__divsf3_pse+0x6a>
     db8:	86 95       	lsr	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f7 95       	ror	r31
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	c9 f7       	brne	.-14     	; 0xdb8 <__divsf3_pse+0x74>
     dc6:	88 0f       	add	r24, r24
     dc8:	91 1d       	adc	r25, r1
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	97 f9       	bld	r25, 7
     dd0:	08 95       	ret
     dd2:	e1 e0       	ldi	r30, 0x01	; 1
     dd4:	66 0f       	add	r22, r22
     dd6:	77 1f       	adc	r23, r23
     dd8:	88 1f       	adc	r24, r24
     dda:	bb 1f       	adc	r27, r27
     ddc:	62 17       	cp	r22, r18
     dde:	73 07       	cpc	r23, r19
     de0:	84 07       	cpc	r24, r20
     de2:	ba 07       	cpc	r27, r26
     de4:	20 f0       	brcs	.+8      	; 0xdee <__divsf3_pse+0xaa>
     de6:	62 1b       	sub	r22, r18
     de8:	73 0b       	sbc	r23, r19
     dea:	84 0b       	sbc	r24, r20
     dec:	ba 0b       	sbc	r27, r26
     dee:	ee 1f       	adc	r30, r30
     df0:	88 f7       	brcc	.-30     	; 0xdd4 <__divsf3_pse+0x90>
     df2:	e0 95       	com	r30
     df4:	08 95       	ret

00000df6 <__fixsfsi>:
     df6:	04 d0       	rcall	.+8      	; 0xe00 <__fixunssfsi>
     df8:	68 94       	set
     dfa:	b1 11       	cpse	r27, r1
     dfc:	b5 c0       	rjmp	.+362    	; 0xf68 <__fp_szero>
     dfe:	08 95       	ret

00000e00 <__fixunssfsi>:
     e00:	98 d0       	rcall	.+304    	; 0xf32 <__fp_splitA>
     e02:	88 f0       	brcs	.+34     	; 0xe26 <__fixunssfsi+0x26>
     e04:	9f 57       	subi	r25, 0x7F	; 127
     e06:	90 f0       	brcs	.+36     	; 0xe2c <__fixunssfsi+0x2c>
     e08:	b9 2f       	mov	r27, r25
     e0a:	99 27       	eor	r25, r25
     e0c:	b7 51       	subi	r27, 0x17	; 23
     e0e:	a0 f0       	brcs	.+40     	; 0xe38 <__fixunssfsi+0x38>
     e10:	d1 f0       	breq	.+52     	; 0xe46 <__fixunssfsi+0x46>
     e12:	66 0f       	add	r22, r22
     e14:	77 1f       	adc	r23, r23
     e16:	88 1f       	adc	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	1a f0       	brmi	.+6      	; 0xe22 <__fixunssfsi+0x22>
     e1c:	ba 95       	dec	r27
     e1e:	c9 f7       	brne	.-14     	; 0xe12 <__fixunssfsi+0x12>
     e20:	12 c0       	rjmp	.+36     	; 0xe46 <__fixunssfsi+0x46>
     e22:	b1 30       	cpi	r27, 0x01	; 1
     e24:	81 f0       	breq	.+32     	; 0xe46 <__fixunssfsi+0x46>
     e26:	9f d0       	rcall	.+318    	; 0xf66 <__fp_zero>
     e28:	b1 e0       	ldi	r27, 0x01	; 1
     e2a:	08 95       	ret
     e2c:	9c c0       	rjmp	.+312    	; 0xf66 <__fp_zero>
     e2e:	67 2f       	mov	r22, r23
     e30:	78 2f       	mov	r23, r24
     e32:	88 27       	eor	r24, r24
     e34:	b8 5f       	subi	r27, 0xF8	; 248
     e36:	39 f0       	breq	.+14     	; 0xe46 <__fixunssfsi+0x46>
     e38:	b9 3f       	cpi	r27, 0xF9	; 249
     e3a:	cc f3       	brlt	.-14     	; 0xe2e <__fixunssfsi+0x2e>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b3 95       	inc	r27
     e44:	d9 f7       	brne	.-10     	; 0xe3c <__fixunssfsi+0x3c>
     e46:	3e f4       	brtc	.+14     	; 0xe56 <__fixunssfsi+0x56>
     e48:	90 95       	com	r25
     e4a:	80 95       	com	r24
     e4c:	70 95       	com	r23
     e4e:	61 95       	neg	r22
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	8f 4f       	sbci	r24, 0xFF	; 255
     e54:	9f 4f       	sbci	r25, 0xFF	; 255
     e56:	08 95       	ret

00000e58 <__floatunsisf>:
     e58:	e8 94       	clt
     e5a:	09 c0       	rjmp	.+18     	; 0xe6e <__floatsisf+0x12>

00000e5c <__floatsisf>:
     e5c:	97 fb       	bst	r25, 7
     e5e:	3e f4       	brtc	.+14     	; 0xe6e <__floatsisf+0x12>
     e60:	90 95       	com	r25
     e62:	80 95       	com	r24
     e64:	70 95       	com	r23
     e66:	61 95       	neg	r22
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	8f 4f       	sbci	r24, 0xFF	; 255
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	99 23       	and	r25, r25
     e70:	a9 f0       	breq	.+42     	; 0xe9c <__floatsisf+0x40>
     e72:	f9 2f       	mov	r31, r25
     e74:	96 e9       	ldi	r25, 0x96	; 150
     e76:	bb 27       	eor	r27, r27
     e78:	93 95       	inc	r25
     e7a:	f6 95       	lsr	r31
     e7c:	87 95       	ror	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b7 95       	ror	r27
     e84:	f1 11       	cpse	r31, r1
     e86:	f8 cf       	rjmp	.-16     	; 0xe78 <__floatsisf+0x1c>
     e88:	fa f4       	brpl	.+62     	; 0xec8 <__floatsisf+0x6c>
     e8a:	bb 0f       	add	r27, r27
     e8c:	11 f4       	brne	.+4      	; 0xe92 <__floatsisf+0x36>
     e8e:	60 ff       	sbrs	r22, 0
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <__floatsisf+0x6c>
     e92:	6f 5f       	subi	r22, 0xFF	; 255
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	16 c0       	rjmp	.+44     	; 0xec8 <__floatsisf+0x6c>
     e9c:	88 23       	and	r24, r24
     e9e:	11 f0       	breq	.+4      	; 0xea4 <__floatsisf+0x48>
     ea0:	96 e9       	ldi	r25, 0x96	; 150
     ea2:	11 c0       	rjmp	.+34     	; 0xec6 <__floatsisf+0x6a>
     ea4:	77 23       	and	r23, r23
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__floatsisf+0x54>
     ea8:	9e e8       	ldi	r25, 0x8E	; 142
     eaa:	87 2f       	mov	r24, r23
     eac:	76 2f       	mov	r23, r22
     eae:	05 c0       	rjmp	.+10     	; 0xeba <__floatsisf+0x5e>
     eb0:	66 23       	and	r22, r22
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__floatsisf+0x74>
     eb4:	96 e8       	ldi	r25, 0x86	; 134
     eb6:	86 2f       	mov	r24, r22
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	2a f0       	brmi	.+10     	; 0xec8 <__floatsisf+0x6c>
     ebe:	9a 95       	dec	r25
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	da f7       	brpl	.-10     	; 0xebe <__floatsisf+0x62>
     ec8:	88 0f       	add	r24, r24
     eca:	96 95       	lsr	r25
     ecc:	87 95       	ror	r24
     ece:	97 f9       	bld	r25, 7
     ed0:	08 95       	ret

00000ed2 <__fp_inf>:
     ed2:	97 f9       	bld	r25, 7
     ed4:	9f 67       	ori	r25, 0x7F	; 127
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	08 95       	ret

00000ede <__fp_nan>:
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	80 ec       	ldi	r24, 0xC0	; 192
     ee2:	08 95       	ret

00000ee4 <__fp_pscA>:
     ee4:	00 24       	eor	r0, r0
     ee6:	0a 94       	dec	r0
     ee8:	16 16       	cp	r1, r22
     eea:	17 06       	cpc	r1, r23
     eec:	18 06       	cpc	r1, r24
     eee:	09 06       	cpc	r0, r25
     ef0:	08 95       	ret

00000ef2 <__fp_pscB>:
     ef2:	00 24       	eor	r0, r0
     ef4:	0a 94       	dec	r0
     ef6:	12 16       	cp	r1, r18
     ef8:	13 06       	cpc	r1, r19
     efa:	14 06       	cpc	r1, r20
     efc:	05 06       	cpc	r0, r21
     efe:	08 95       	ret

00000f00 <__fp_round>:
     f00:	09 2e       	mov	r0, r25
     f02:	03 94       	inc	r0
     f04:	00 0c       	add	r0, r0
     f06:	11 f4       	brne	.+4      	; 0xf0c <__fp_round+0xc>
     f08:	88 23       	and	r24, r24
     f0a:	52 f0       	brmi	.+20     	; 0xf20 <__fp_round+0x20>
     f0c:	bb 0f       	add	r27, r27
     f0e:	40 f4       	brcc	.+16     	; 0xf20 <__fp_round+0x20>
     f10:	bf 2b       	or	r27, r31
     f12:	11 f4       	brne	.+4      	; 0xf18 <__fp_round+0x18>
     f14:	60 ff       	sbrs	r22, 0
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <__fp_round+0x20>
     f18:	6f 5f       	subi	r22, 0xFF	; 255
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	8f 4f       	sbci	r24, 0xFF	; 255
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	08 95       	ret

00000f22 <__fp_split3>:
     f22:	57 fd       	sbrc	r21, 7
     f24:	90 58       	subi	r25, 0x80	; 128
     f26:	44 0f       	add	r20, r20
     f28:	55 1f       	adc	r21, r21
     f2a:	59 f0       	breq	.+22     	; 0xf42 <__fp_splitA+0x10>
     f2c:	5f 3f       	cpi	r21, 0xFF	; 255
     f2e:	71 f0       	breq	.+28     	; 0xf4c <__fp_splitA+0x1a>
     f30:	47 95       	ror	r20

00000f32 <__fp_splitA>:
     f32:	88 0f       	add	r24, r24
     f34:	97 fb       	bst	r25, 7
     f36:	99 1f       	adc	r25, r25
     f38:	61 f0       	breq	.+24     	; 0xf52 <__fp_splitA+0x20>
     f3a:	9f 3f       	cpi	r25, 0xFF	; 255
     f3c:	79 f0       	breq	.+30     	; 0xf5c <__fp_splitA+0x2a>
     f3e:	87 95       	ror	r24
     f40:	08 95       	ret
     f42:	12 16       	cp	r1, r18
     f44:	13 06       	cpc	r1, r19
     f46:	14 06       	cpc	r1, r20
     f48:	55 1f       	adc	r21, r21
     f4a:	f2 cf       	rjmp	.-28     	; 0xf30 <__fp_split3+0xe>
     f4c:	46 95       	lsr	r20
     f4e:	f1 df       	rcall	.-30     	; 0xf32 <__fp_splitA>
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <__fp_splitA+0x30>
     f52:	16 16       	cp	r1, r22
     f54:	17 06       	cpc	r1, r23
     f56:	18 06       	cpc	r1, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	f1 cf       	rjmp	.-30     	; 0xf3e <__fp_splitA+0xc>
     f5c:	86 95       	lsr	r24
     f5e:	71 05       	cpc	r23, r1
     f60:	61 05       	cpc	r22, r1
     f62:	08 94       	sec
     f64:	08 95       	ret

00000f66 <__fp_zero>:
     f66:	e8 94       	clt

00000f68 <__fp_szero>:
     f68:	bb 27       	eor	r27, r27
     f6a:	66 27       	eor	r22, r22
     f6c:	77 27       	eor	r23, r23
     f6e:	cb 01       	movw	r24, r22
     f70:	97 f9       	bld	r25, 7
     f72:	08 95       	ret

00000f74 <__gesf2>:
     f74:	66 d0       	rcall	.+204    	; 0x1042 <__fp_cmp>
     f76:	08 f4       	brcc	.+2      	; 0xf7a <__gesf2+0x6>
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	08 95       	ret

00000f7c <__mulsf3>:
     f7c:	0b d0       	rcall	.+22     	; 0xf94 <__mulsf3x>
     f7e:	c0 cf       	rjmp	.-128    	; 0xf00 <__fp_round>
     f80:	b1 df       	rcall	.-158    	; 0xee4 <__fp_pscA>
     f82:	28 f0       	brcs	.+10     	; 0xf8e <__mulsf3+0x12>
     f84:	b6 df       	rcall	.-148    	; 0xef2 <__fp_pscB>
     f86:	18 f0       	brcs	.+6      	; 0xf8e <__mulsf3+0x12>
     f88:	95 23       	and	r25, r21
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__mulsf3+0x12>
     f8c:	a2 cf       	rjmp	.-188    	; 0xed2 <__fp_inf>
     f8e:	a7 cf       	rjmp	.-178    	; 0xede <__fp_nan>
     f90:	11 24       	eor	r1, r1
     f92:	ea cf       	rjmp	.-44     	; 0xf68 <__fp_szero>

00000f94 <__mulsf3x>:
     f94:	c6 df       	rcall	.-116    	; 0xf22 <__fp_split3>
     f96:	a0 f3       	brcs	.-24     	; 0xf80 <__mulsf3+0x4>

00000f98 <__mulsf3_pse>:
     f98:	95 9f       	mul	r25, r21
     f9a:	d1 f3       	breq	.-12     	; 0xf90 <__mulsf3+0x14>
     f9c:	95 0f       	add	r25, r21
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	55 1f       	adc	r21, r21
     fa2:	62 9f       	mul	r22, r18
     fa4:	f0 01       	movw	r30, r0
     fa6:	72 9f       	mul	r23, r18
     fa8:	bb 27       	eor	r27, r27
     faa:	f0 0d       	add	r31, r0
     fac:	b1 1d       	adc	r27, r1
     fae:	63 9f       	mul	r22, r19
     fb0:	aa 27       	eor	r26, r26
     fb2:	f0 0d       	add	r31, r0
     fb4:	b1 1d       	adc	r27, r1
     fb6:	aa 1f       	adc	r26, r26
     fb8:	64 9f       	mul	r22, r20
     fba:	66 27       	eor	r22, r22
     fbc:	b0 0d       	add	r27, r0
     fbe:	a1 1d       	adc	r26, r1
     fc0:	66 1f       	adc	r22, r22
     fc2:	82 9f       	mul	r24, r18
     fc4:	22 27       	eor	r18, r18
     fc6:	b0 0d       	add	r27, r0
     fc8:	a1 1d       	adc	r26, r1
     fca:	62 1f       	adc	r22, r18
     fcc:	73 9f       	mul	r23, r19
     fce:	b0 0d       	add	r27, r0
     fd0:	a1 1d       	adc	r26, r1
     fd2:	62 1f       	adc	r22, r18
     fd4:	83 9f       	mul	r24, r19
     fd6:	a0 0d       	add	r26, r0
     fd8:	61 1d       	adc	r22, r1
     fda:	22 1f       	adc	r18, r18
     fdc:	74 9f       	mul	r23, r20
     fde:	33 27       	eor	r19, r19
     fe0:	a0 0d       	add	r26, r0
     fe2:	61 1d       	adc	r22, r1
     fe4:	23 1f       	adc	r18, r19
     fe6:	84 9f       	mul	r24, r20
     fe8:	60 0d       	add	r22, r0
     fea:	21 1d       	adc	r18, r1
     fec:	82 2f       	mov	r24, r18
     fee:	76 2f       	mov	r23, r22
     ff0:	6a 2f       	mov	r22, r26
     ff2:	11 24       	eor	r1, r1
     ff4:	9f 57       	subi	r25, 0x7F	; 127
     ff6:	50 40       	sbci	r21, 0x00	; 0
     ff8:	8a f0       	brmi	.+34     	; 0x101c <__mulsf3_pse+0x84>
     ffa:	e1 f0       	breq	.+56     	; 0x1034 <__mulsf3_pse+0x9c>
     ffc:	88 23       	and	r24, r24
     ffe:	4a f0       	brmi	.+18     	; 0x1012 <__mulsf3_pse+0x7a>
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	bb 1f       	adc	r27, r27
    1006:	66 1f       	adc	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	a9 f7       	brne	.-22     	; 0xffc <__mulsf3_pse+0x64>
    1012:	9e 3f       	cpi	r25, 0xFE	; 254
    1014:	51 05       	cpc	r21, r1
    1016:	70 f0       	brcs	.+28     	; 0x1034 <__mulsf3_pse+0x9c>
    1018:	5c cf       	rjmp	.-328    	; 0xed2 <__fp_inf>
    101a:	a6 cf       	rjmp	.-180    	; 0xf68 <__fp_szero>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	ec f3       	brlt	.-6      	; 0x101a <__mulsf3_pse+0x82>
    1020:	98 3e       	cpi	r25, 0xE8	; 232
    1022:	dc f3       	brlt	.-10     	; 0x101a <__mulsf3_pse+0x82>
    1024:	86 95       	lsr	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	b7 95       	ror	r27
    102c:	f7 95       	ror	r31
    102e:	e7 95       	ror	r30
    1030:	9f 5f       	subi	r25, 0xFF	; 255
    1032:	c1 f7       	brne	.-16     	; 0x1024 <__mulsf3_pse+0x8c>
    1034:	fe 2b       	or	r31, r30
    1036:	88 0f       	add	r24, r24
    1038:	91 1d       	adc	r25, r1
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <__fp_cmp>:
    1042:	99 0f       	add	r25, r25
    1044:	00 08       	sbc	r0, r0
    1046:	55 0f       	add	r21, r21
    1048:	aa 0b       	sbc	r26, r26
    104a:	e0 e8       	ldi	r30, 0x80	; 128
    104c:	fe ef       	ldi	r31, 0xFE	; 254
    104e:	16 16       	cp	r1, r22
    1050:	17 06       	cpc	r1, r23
    1052:	e8 07       	cpc	r30, r24
    1054:	f9 07       	cpc	r31, r25
    1056:	c0 f0       	brcs	.+48     	; 0x1088 <__fp_cmp+0x46>
    1058:	12 16       	cp	r1, r18
    105a:	13 06       	cpc	r1, r19
    105c:	e4 07       	cpc	r30, r20
    105e:	f5 07       	cpc	r31, r21
    1060:	98 f0       	brcs	.+38     	; 0x1088 <__fp_cmp+0x46>
    1062:	62 1b       	sub	r22, r18
    1064:	73 0b       	sbc	r23, r19
    1066:	84 0b       	sbc	r24, r20
    1068:	95 0b       	sbc	r25, r21
    106a:	39 f4       	brne	.+14     	; 0x107a <__fp_cmp+0x38>
    106c:	0a 26       	eor	r0, r26
    106e:	61 f0       	breq	.+24     	; 0x1088 <__fp_cmp+0x46>
    1070:	23 2b       	or	r18, r19
    1072:	24 2b       	or	r18, r20
    1074:	25 2b       	or	r18, r21
    1076:	21 f4       	brne	.+8      	; 0x1080 <__fp_cmp+0x3e>
    1078:	08 95       	ret
    107a:	0a 26       	eor	r0, r26
    107c:	09 f4       	brne	.+2      	; 0x1080 <__fp_cmp+0x3e>
    107e:	a1 40       	sbci	r26, 0x01	; 1
    1080:	a6 95       	lsr	r26
    1082:	8f ef       	ldi	r24, 0xFF	; 255
    1084:	81 1d       	adc	r24, r1
    1086:	81 1d       	adc	r24, r1
    1088:	08 95       	ret

0000108a <__divmodhi4>:
    108a:	97 fb       	bst	r25, 7
    108c:	07 2e       	mov	r0, r23
    108e:	16 f4       	brtc	.+4      	; 0x1094 <__divmodhi4+0xa>
    1090:	00 94       	com	r0
    1092:	07 d0       	rcall	.+14     	; 0x10a2 <__divmodhi4_neg1>
    1094:	77 fd       	sbrc	r23, 7
    1096:	09 d0       	rcall	.+18     	; 0x10aa <__divmodhi4_neg2>
    1098:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
    109c:	07 fc       	sbrc	r0, 7
    109e:	05 d0       	rcall	.+10     	; 0x10aa <__divmodhi4_neg2>
    10a0:	3e f4       	brtc	.+14     	; 0x10b0 <__divmodhi4_exit>

000010a2 <__divmodhi4_neg1>:
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__divmodhi4_neg2>:
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255

000010b0 <__divmodhi4_exit>:
    10b0:	08 95       	ret

000010b2 <__udivmodsi4>:
    10b2:	a1 e2       	ldi	r26, 0x21	; 33
    10b4:	1a 2e       	mov	r1, r26
    10b6:	aa 1b       	sub	r26, r26
    10b8:	bb 1b       	sub	r27, r27
    10ba:	fd 01       	movw	r30, r26
    10bc:	0d c0       	rjmp	.+26     	; 0x10d8 <__udivmodsi4_ep>

000010be <__udivmodsi4_loop>:
    10be:	aa 1f       	adc	r26, r26
    10c0:	bb 1f       	adc	r27, r27
    10c2:	ee 1f       	adc	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	a2 17       	cp	r26, r18
    10c8:	b3 07       	cpc	r27, r19
    10ca:	e4 07       	cpc	r30, r20
    10cc:	f5 07       	cpc	r31, r21
    10ce:	20 f0       	brcs	.+8      	; 0x10d8 <__udivmodsi4_ep>
    10d0:	a2 1b       	sub	r26, r18
    10d2:	b3 0b       	sbc	r27, r19
    10d4:	e4 0b       	sbc	r30, r20
    10d6:	f5 0b       	sbc	r31, r21

000010d8 <__udivmodsi4_ep>:
    10d8:	66 1f       	adc	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	1a 94       	dec	r1
    10e2:	69 f7       	brne	.-38     	; 0x10be <__udivmodsi4_loop>
    10e4:	60 95       	com	r22
    10e6:	70 95       	com	r23
    10e8:	80 95       	com	r24
    10ea:	90 95       	com	r25
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	bd 01       	movw	r22, r26
    10f2:	cf 01       	movw	r24, r30
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <_exit>:
    111e:	f8 94       	cli

00001120 <__stop_program>:
    1120:	ff cf       	rjmp	.-2      	; 0x1120 <__stop_program>
