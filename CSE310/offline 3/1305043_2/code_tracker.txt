type_specifier : INT
declaration_list : ID LTHIRD CONST_INT RTHIRD
a
a dw ? ,?
declaration_list : declaration_list COMMA ID
c
a dw ? ,?
c dw ?
declaration_list : declaration_list COMMA ID
i
a dw ? ,?
c dw ?
i dw ?
declaration_list : declaration_list COMMA ID
j
a dw ? ,?
c dw ?
i dw ?
j dw ?
var_declaration : type_specifier declaration_list SEMICOLON
a dw ? ,?
c dw ?
i dw ?
j dw ?
type_specifier : FLOAT
declaration_list : ID
d
d dw ?
var_declaration : var_declaration type_specifier declaration_list SEMICOLON
a dw ? ,?
c dw ?
i dw ?
j dw ?
d dw ?
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
statement  : expression_statement
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
statements : statement
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
factor : CONST_INT 
5
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
statement  : expression_statement
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
statements : statements statement
SPC11: 
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax

SPC22: 
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax

mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
variable : ID 
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 0
mov i, ax
expression_statement : expression SEMICOLON
mov ax, 0
mov i, ax
variable : ID 
factor : variable 
unary_expression : factor
term :unary_expression
simple_expression : term 
factor : CONST_INT 
2
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
logic_expression : rel_expression
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
expression : logic_expression
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
expression_statement : expression SEMICOLON
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
variable : ID 
variable : ID 
factor : variable 
unary_expression : factor
term :unary_expression
simple_expression : term 
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
simple_expression : simple_expression ADDOP term
mov ax, i
add ax, 1
mov t1, ax
rel_expression : simple_expression
mov ax, i
add ax, 1
mov t1, ax
logic_expression : rel_expression
mov ax, i
add ax, 1
mov t1, ax
expression : variable ASSIGNOP logic_expression
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
variable : ID 
factor : variable 
unary_expression : factor
term :unary_expression
simple_expression : term 
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
logic_expression : rel_expression
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
expression : logic_expression
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
factor : CONST_INT 
8
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
statement  : expression_statement
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
factor : CONST_INT 
1
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD 
factor : CONST_INT 
7
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
expression_statement : expression SEMICOLON
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
statement  : expression_statement
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
statement  : IF LPAREN expression RPAREN statement ELSE statement
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
statements : statement
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
compound_statement : LCURL statements RCURL
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
statement  : compound_statement
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
statement  : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement
SPC11: 
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax

SPC22: 
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:

mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
statement  : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement
SPC11: 
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:

SPC22: 
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:

mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:
factor : CONST_INT 
0
unary_expression : factor
term :unary_expression
simple_expression : term 
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement  : RETURN expression SEMICOLON
mov ah, 4ch
int 21h
statements : statements statement
SPC11: 
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:

SPC22: 
mov ah, 4ch
int 21h

mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:
mov ah, 4ch
int 21h
compound_statement : LCURL var_declaration statements RCURL

.data

a dw ? ,?
c dw ?
i dw ?
j dw ?
d dw ?
t0 dw ?
t1 dw ?
t2 dw ?

.code

OUTDEC PROC
;INPUT AX
PUSH AX
PUSH BX
PUSH CX
PUSH DX
OR AX,AX
JGE @END_IF1
PUSH AX
MOV DL,'-'
MOV AH,2
INT 21H
POP AX
NEG AX

@END_IF1:
XOR CX,CX
MOV BX,10D

@REPEAT1:
XOR DX,DX
DIV BX
PUSH DX
INC CX
OR AX,AX
JNE @REPEAT1

MOV AH,2

@PRINT_LOOP:

POP DX
OR DL,30H
INT 21H
LOOP @PRINT_LOOP

POP DX
POP CX
POP BX
POP AX
RET
OUTDEC ENDP

main proc

mov ax ,@data
mov ds ,ax
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:
mov ah, 4ch
int 21h
Program : INT MAIN LPAREN RPAREN compound_statement

.data

a dw ? ,?
c dw ?
i dw ?
j dw ?
d dw ?
t0 dw ?
t1 dw ?
t2 dw ?

.code

OUTDEC PROC
;INPUT AX
PUSH AX
PUSH BX
PUSH CX
PUSH DX
OR AX,AX
JGE @END_IF1
PUSH AX
MOV DL,'-'
MOV AH,2
INT 21H
POP AX
NEG AX

@END_IF1:
XOR CX,CX
MOV BX,10D

@REPEAT1:
XOR DX,DX
DIV BX
PUSH DX
INC CX
OR AX,AX
JNE @REPEAT1

MOV AH,2

@PRINT_LOOP:

POP DX
OR DL,30H
INT 21H
LOOP @PRINT_LOOP

POP DX
POP CX
POP BX
POP AX
RET
OUTDEC ENDP

main proc

mov ax ,@data
mov ds ,ax
mov ax, 1
lea di, a
add di, 0
add di, 0
mov [di], ax
mov ax, 5
lea di, a
add di, 1
add di, 1
mov [di], ax
mov ax, 0
mov i, ax
L6:
mov ax, i
cmp ax, 2
jl L0
mov t0, 0
jmp L1
L0:
mov t0, 1
L1:
cmp t0, 0
je L7
mov ax, i
cmp ax, 0
je L2
mov t2, 0
jmp L3
L2:
mov t2, 1
L3:
mov ax, t2
cmp ax, 0
je L4
mov ax, 8
lea di, a
add di, 0
add di, 0
mov [di], ax
jmp L5
L4:
mov ax, 7
lea di, a
add di, 1
add di, 1
mov [di], ax
L5:
mov ax, i
add ax, 1
mov t1, ax
mov ax, t1
mov i, ax
jmp L6
L7:
lea di, a
mov bx, 2
L8:
cmp bx, 0
je L9
mov ax, [di]
call outdec
dec bx
inc di
inc di
mov ah,2
mov dl,0ah
int 21h
mov dl,0dh
int 21h
jmp L8
L9:
mov ah, 4ch
int 21h
a

c

i

j

d

